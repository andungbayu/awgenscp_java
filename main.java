
import awgenscp_func.awgfunct;
import awgenscp_func.matfunct;
import awgenscp_func.noaafunc;
import awgenscp_func.readcfs;
import java.awt.Desktop;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import javax.swing.JFileChooser;
import java.net.URI;
import java.net.URL;
import java.nio.channels.Channels;
import java.nio.channels.ReadableByteChannel;
import java.sql.Timestamp;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author andung
 */
public class main extends javax.swing.JFrame {
    
    // import function
    matfunct matlab = new matfunct();
    awgfunct awg = new awgfunct();
    noaafunc noaa = new noaafunc();
    readcfs cfs = new readcfs();

    /**
     * Creates new form main
     */
    public main() {
        
//    try { 
//    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
//    } catch (Exception ex) { 
//    ex.printStackTrace(); 
//    }
            
    initComponents();
        

    
    }    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        chooser_load = new javax.swing.JFileChooser();
        chooser_new = new javax.swing.JFileChooser();
        chooser_adjusttemp_infile = new javax.swing.JFileChooser();
        chooser_adjusttemp_outfile = new javax.swing.JFileChooser();
        chooser_setrain = new javax.swing.JFileChooser();
        chooser_settemp = new javax.swing.JFileChooser();
        chooser_setpredict = new javax.swing.JFileChooser();
        chooser_setfuture = new javax.swing.JFileChooser();
        chooser_export = new javax.swing.JFileChooser();
        chooser_aphro = new javax.swing.JFileChooser();
        dialog_help = new javax.swing.JDialog();
        close_about = new javax.swing.JButton();
        about_title = new javax.swing.JLabel();
        about_desc1 = new javax.swing.JLabel();
        about_desc2 = new javax.swing.JLabel();
        about_desc3 = new javax.swing.JLabel();
        about_support = new javax.swing.JLabel();
        logo1 = new javax.swing.JLabel();
        logo2 = new javax.swing.JLabel();
        logo3 = new javax.swing.JLabel();
        dialog_cfsv2 = new javax.swing.JDialog();
        cfsv2_label1 = new javax.swing.JLabel();
        cfsv2_label2 = new javax.swing.JLabel();
        cfsv2_label3 = new javax.swing.JLabel();
        combo_sstzone = new javax.swing.JComboBox<>();
        cfsv2_label4 = new javax.swing.JLabel();
        cfsv2_download = new javax.swing.JButton();
        cfsv2_cancel = new javax.swing.JButton();
        combo_cfsens = new javax.swing.JComboBox<>();
        dialog_aphro = new javax.swing.JDialog();
        noaa_jLabel1 = new javax.swing.JLabel();
        noaa_jLabel2 = new javax.swing.JLabel();
        noaa_jLabel3 = new javax.swing.JLabel();
        noaa_jLabel4 = new javax.swing.JLabel();
        noaa_jLabel5 = new javax.swing.JLabel();
        noaa_jLabel6 = new javax.swing.JLabel();
        noaa_jLabel9 = new javax.swing.JLabel();
        coord_aphro1 = new javax.swing.JTextField();
        coord_aphro2 = new javax.swing.JTextField();
        time_aphro1 = new javax.swing.JTextField();
        noaa_jLabel15 = new javax.swing.JLabel();
        time_aphro2 = new javax.swing.JTextField();
        aphro_cancel = new javax.swing.JButton();
        aphro_extract = new javax.swing.JButton();
        noaa_jLabel24 = new javax.swing.JLabel();
        aphrodir = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        dialog_noaa = new javax.swing.JDialog();
        noaa_label5 = new javax.swing.JLabel();
        noaa_label6 = new javax.swing.JLabel();
        noaa_label7 = new javax.swing.JLabel();
        combo_sstobs = new javax.swing.JComboBox<>();
        noaa_download = new javax.swing.JButton();
        noaa_cancel = new javax.swing.JButton();
        time_noaa3 = new javax.swing.JTextField();
        noaa_jLabel12 = new javax.swing.JLabel();
        noaa_jLabel13 = new javax.swing.JLabel();
        time_noaa2 = new javax.swing.JTextField();
        noaa_jLabel20 = new javax.swing.JLabel();
        time_noaa4 = new javax.swing.JTextField();
        time_noaa1 = new javax.swing.JTextField();
        noaa_jLabel25 = new javax.swing.JLabel();
        noaa_jLabel16 = new javax.swing.JLabel();
        noaa_jLabel17 = new javax.swing.JLabel();
        dialog_adjusttemp = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        adjusttemp_sourcefile = new javax.swing.JTextField();
        adjusttemp_initlev = new javax.swing.JTextField();
        adjusttemp_outfile = new javax.swing.JTextField();
        adjusttemp_finallev = new javax.swing.JTextField();
        adjusttemp_cancel = new javax.swing.JButton();
        adjusttemp_continue = new javax.swing.JButton();
        adjusttemp_outbrowse = new javax.swing.JButton();
        adjusttemp_sourcebrowse = new javax.swing.JButton();
        dialog_setrain = new javax.swing.JDialog();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        setrain_file = new javax.swing.JTextField();
        setrain_browsefile = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        setrain_time1 = new javax.swing.JTextField();
        setrain_time2 = new javax.swing.JTextField();
        setrain_time3 = new javax.swing.JTextField();
        setrain_cancel = new javax.swing.JButton();
        setrain_continue = new javax.swing.JButton();
        dialog_settemp = new javax.swing.JDialog();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        settemp_file = new javax.swing.JTextField();
        settemp_filebrowse = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        settemp_time1 = new javax.swing.JTextField();
        settemp_time2 = new javax.swing.JTextField();
        settemp_time3 = new javax.swing.JTextField();
        settemp_cancel = new javax.swing.JButton();
        settemp_continue = new javax.swing.JButton();
        dialog_setpredict = new javax.swing.JDialog();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        setpredict_file = new javax.swing.JTextField();
        setpredict_browsefile = new javax.swing.JButton();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        setpredict_time1 = new javax.swing.JTextField();
        setpredict_time2 = new javax.swing.JTextField();
        setpredict_cancel = new javax.swing.JButton();
        setpredict_continue = new javax.swing.JButton();
        dialog_setfuture = new javax.swing.JDialog();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        setfuture_file = new javax.swing.JTextField();
        setpredict_browsefile1 = new javax.swing.JButton();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        setfuture_time1 = new javax.swing.JTextField();
        setfuture_time2 = new javax.swing.JTextField();
        setfuture_cancel = new javax.swing.JButton();
        setfuture_continue = new javax.swing.JButton();
        dialog_modelbuild = new javax.swing.JDialog();
        jLabel39 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        simtime1 = new javax.swing.JTextField();
        simtime2 = new javax.swing.JTextField();
        simtime_continue = new javax.swing.JButton();
        simtime_cancel = new javax.swing.JButton();
        jLabel50 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        simtime3 = new javax.swing.JTextField();
        simtime4 = new javax.swing.JTextField();
        dialog_projectnotset = new javax.swing.JDialog();
        jLabel52 = new javax.swing.JLabel();
        button_overwrite1 = new javax.swing.JButton();
        jLabel53 = new javax.swing.JLabel();
        dialog_overwrite = new javax.swing.JDialog();
        jLabel46 = new javax.swing.JLabel();
        button_overwrite = new javax.swing.JButton();
        button_nowrite = new javax.swing.JButton();
        buttongroup_class = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel44 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        table_projectview = new javax.swing.JTable();
        jLabel45 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        table_resultview = new javax.swing.JTable();
        jLabel49 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        main_table = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        maincontrol = new javax.swing.JTextArea();
        jLabel48 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        table_simview = new javax.swing.JTable();
        mainmenu = new javax.swing.JMenuBar();
        fileoption = new javax.swing.JMenu();
        newproject = new javax.swing.JMenuItem();
        loadproject = new javax.swing.JMenuItem();
        saveproject = new javax.swing.JMenuItem();
        saveas = new javax.swing.JMenuItem();
        closeproject = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        export = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        exitproject = new javax.swing.JMenuItem();
        setupoption = new javax.swing.JMenu();
        setuprain = new javax.swing.JMenuItem();
        setuptemp = new javax.swing.JMenuItem();
        setuppredictor = new javax.swing.JMenuItem();
        setupsimulation = new javax.swing.JMenuItem();
        buildoption = new javax.swing.JMenu();
        modelbuild = new javax.swing.JMenuItem();
        predictor_format = new javax.swing.JMenuItem();
        rainsetup = new javax.swing.JMenuItem();
        rainregress = new javax.swing.JMenuItem();
        tempsetup = new javax.swing.JMenuItem();
        tempregress = new javax.swing.JMenuItem();
        runoption = new javax.swing.JMenu();
        run_rain = new javax.swing.JMenuItem();
        run_temp = new javax.swing.JMenuItem();
        getrain_meanens = new javax.swing.JMenuItem();
        gettemp_meanens = new javax.swing.JMenuItem();
        postprocess = new javax.swing.JMenu();
        getrain_monthens = new javax.swing.JMenuItem();
        gettemp_monthens = new javax.swing.JMenuItem();
        getrain_monthensmean = new javax.swing.JMenuItem();
        gettemp_monthensmean = new javax.swing.JMenuItem();
        extrasoption = new javax.swing.JMenu();
        aphrosetup = new javax.swing.JMenuItem();
        sstsetup = new javax.swing.JMenuItem();
        cfsv2setup = new javax.swing.JMenuItem();
        aboutoption = new javax.swing.JMenu();
        tutorial = new javax.swing.JMenuItem();
        help = new javax.swing.JMenuItem();

        chooser_load.setApproveButtonText("Load");
        chooser_load.setDialogTitle("Load project");
        chooser_load.setFileFilter(new ProjectFilter());
        chooser_load.setFileHidingEnabled(true);
        chooser_load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooser_loadActionPerformed(evt);
            }
        });

        chooser_new.setApproveButtonText("Create");
        chooser_new.setApproveButtonToolTipText("");
        chooser_new.setDialogTitle("Create project");
        chooser_new.setFileFilter(new ProjectFilter());
        chooser_new.setFileHidingEnabled(true);
        chooser_new.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooser_newActionPerformed(evt);
            }
        });

        chooser_adjusttemp_infile.setApproveButtonText("Select");
        chooser_adjusttemp_infile.setFileFilter(new TextFilter());

        chooser_adjusttemp_outfile.setApproveButtonText("Create");
        chooser_adjusttemp_outfile.setFileFilter(new TextFilter());

        chooser_setrain.setApproveButtonText("Select");
        chooser_setrain.setFileFilter(new TextFilter());

        chooser_settemp.setApproveButtonText("Select");
        chooser_settemp.setDialogTitle("");
        chooser_settemp.setFileFilter(new TextFilter());

        chooser_setpredict.setApproveButtonText("Select");

        chooser_setfuture.setApproveButtonText("Select");

        chooser_export.setApproveButtonText("Export");
        chooser_export.setApproveButtonToolTipText("");
        chooser_export.setFileFilter(new csvFilter());

        chooser_aphro.setApproveButtonText("Select");
        chooser_aphro.setFileFilter(new folderFilter());
        chooser_aphro.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

        dialog_help.setTitle("About");
        dialog_help.setBackground(new java.awt.Color(255, 255, 255));
        dialog_help.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        dialog_help.setForeground(java.awt.Color.white);
        dialog_help.setMinimumSize(new java.awt.Dimension(500, 400));
        dialog_help.setResizable(false);

        close_about.setText("Close");
        close_about.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                close_aboutActionPerformed(evt);
            }
        });

        about_title.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        about_title.setText("<html> ARTICULATED WEATHER GENERATOR <br> FOR SEASONAL CLIMATE PREDICTION (AWGenSCP) </html>");

        about_desc1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        about_desc1.setText("<html>Medium Range Climate Prediction Model version 1.0.0 <br> Nurjani E, Sekaranom AB and others <br>  Copyright (C) 2018 </html>");
        about_desc1.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        about_desc2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        about_desc2.setText("<html> This is  free software; see the source code for copying conditions <br><br> There is ABSOLUTELY NO WARRANTY; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE </html>");
        about_desc2.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        about_desc3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        about_desc3.setText("<html> Additional information are available at <br> http://geo.ugm.ac.id  <br> for more imformation contact us at: <br> andung.geo@ugm.ac.id </html>");
        about_desc3.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        about_support.setText("supported by");

        logo1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ugm.jpg"))); // NOI18N

        logo2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/logo_help.png"))); // NOI18N

        logo3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/dikti.png"))); // NOI18N

        javax.swing.GroupLayout dialog_helpLayout = new javax.swing.GroupLayout(dialog_help.getContentPane());
        dialog_help.getContentPane().setLayout(dialog_helpLayout);
        dialog_helpLayout.setHorizontalGroup(
            dialog_helpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialog_helpLayout.createSequentialGroup()
                .addGroup(dialog_helpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dialog_helpLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(dialog_helpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(about_support)
                            .addComponent(logo3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(logo1, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(dialog_helpLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(logo2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(dialog_helpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dialog_helpLayout.createSequentialGroup()
                        .addGroup(dialog_helpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(about_desc1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(about_title, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(47, 47, 47))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dialog_helpLayout.createSequentialGroup()
                        .addGroup(dialog_helpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(about_desc3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(about_desc2, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())))
            .addGroup(dialog_helpLayout.createSequentialGroup()
                .addGap(198, 198, 198)
                .addComponent(close_about)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        dialog_helpLayout.setVerticalGroup(
            dialog_helpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dialog_helpLayout.createSequentialGroup()
                .addGroup(dialog_helpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dialog_helpLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(about_title, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(about_desc1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(dialog_helpLayout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(logo2)))
                .addGap(27, 27, 27)
                .addGroup(dialog_helpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dialog_helpLayout.createSequentialGroup()
                        .addComponent(about_support)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(logo3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(logo1))
                    .addGroup(dialog_helpLayout.createSequentialGroup()
                        .addComponent(about_desc2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(about_desc3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(close_about)
                .addContainerGap(42, Short.MAX_VALUE))
        );

        dialog_cfsv2.setForeground(java.awt.Color.white);
        dialog_cfsv2.setMinimumSize(new java.awt.Dimension(650, 325));
        dialog_cfsv2.setResizable(false);

        cfsv2_label1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cfsv2_label1.setText("CFSv2 Data Extractor");

        cfsv2_label2.setText("<html> This function will download SST forecast data from CFSv2 generated by NOAA CPC, <br> visit http://www.cpc.ncep.noaa.gov/products/CFSv2/CFSv2seasonal.shtml for more information</html>");

        cfsv2_label3.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        cfsv2_label3.setText("Select SST Zone");

        combo_sstzone.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nino 1+2", "Nino 3", "Nino 3.4", "Nino 4" }));
        combo_sstzone.setSelectedIndex(2);

        cfsv2_label4.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        cfsv2_label4.setText("Select CFSv2 Ensemble model");

        cfsv2_download.setText("Download");
        cfsv2_download.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cfsv2_downloadActionPerformed(evt);
            }
        });

        cfsv2_cancel.setText("Cancel");
        cfsv2_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cfsv2_cancelActionPerformed(evt);
            }
        });

        combo_cfsens.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ensemble 1", "Ensemble 2", "Ensemble 3" }));
        combo_cfsens.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_cfsensActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dialog_cfsv2Layout = new javax.swing.GroupLayout(dialog_cfsv2.getContentPane());
        dialog_cfsv2.getContentPane().setLayout(dialog_cfsv2Layout);
        dialog_cfsv2Layout.setHorizontalGroup(
            dialog_cfsv2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialog_cfsv2Layout.createSequentialGroup()
                .addContainerGap(36, Short.MAX_VALUE)
                .addGroup(dialog_cfsv2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cfsv2_label1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(dialog_cfsv2Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(dialog_cfsv2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(combo_sstzone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cfsv2_label3)
                            .addComponent(cfsv2_label2, javax.swing.GroupLayout.PREFERRED_SIZE, 594, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cfsv2_label4)
                            .addComponent(combo_cfsens, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
            .addGroup(dialog_cfsv2Layout.createSequentialGroup()
                .addGap(214, 214, 214)
                .addComponent(cfsv2_cancel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cfsv2_download)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        dialog_cfsv2Layout.setVerticalGroup(
            dialog_cfsv2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialog_cfsv2Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(cfsv2_label1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cfsv2_label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cfsv2_label3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(combo_sstzone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(cfsv2_label4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(combo_cfsens, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(dialog_cfsv2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cfsv2_cancel)
                    .addComponent(cfsv2_download))
                .addGap(42, 42, 42))
        );

        dialog_aphro.setMinimumSize(new java.awt.Dimension(475, 500));
        dialog_aphro.setResizable(false);

        noaa_jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        noaa_jLabel1.setText("APHRODITE DAILY RAINFALL DATA EXTRACTOR");

        noaa_jLabel2.setText("<html> This function extract rainfall data from APHRODITE project <br> For more information, please check http://www.chikyu.ac.jp/precip/english/ </html>");

        noaa_jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        noaa_jLabel3.setText("Subset coordinate");

        noaa_jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        noaa_jLabel4.setText("Subset timeseries");

        noaa_jLabel5.setText("Longitude");

        noaa_jLabel6.setText("Latitude");

        noaa_jLabel9.setText("From year");

        coord_aphro1.setText("0.0");
        coord_aphro1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coord_aphro1ActionPerformed(evt);
            }
        });

        coord_aphro2.setText("0.0");
        coord_aphro2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coord_aphro2ActionPerformed(evt);
            }
        });

        time_aphro1.setText("1961");
        time_aphro1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                time_aphro1MouseExited(evt);
            }
        });

        noaa_jLabel15.setText("To year");

        time_aphro2.setText("2006");
        time_aphro2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                time_aphro2ActionPerformed(evt);
            }
        });

        aphro_cancel.setText("Cancel");
        aphro_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aphro_cancelActionPerformed(evt);
            }
        });

        aphro_extract.setText("Extract");
        aphro_extract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aphro_extractActionPerformed(evt);
            }
        });

        noaa_jLabel24.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        noaa_jLabel24.setText("NetCDF directory");

        aphrodir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aphrodirActionPerformed(evt);
            }
        });

        jButton1.setText("Browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dialog_aphroLayout = new javax.swing.GroupLayout(dialog_aphro.getContentPane());
        dialog_aphro.getContentPane().setLayout(dialog_aphroLayout);
        dialog_aphroLayout.setHorizontalGroup(
            dialog_aphroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialog_aphroLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(dialog_aphroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(dialog_aphroLayout.createSequentialGroup()
                        .addComponent(noaa_jLabel9)
                        .addGap(11, 11, 11)
                        .addComponent(time_aphro1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(dialog_aphroLayout.createSequentialGroup()
                        .addComponent(noaa_jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(coord_aphro1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(42, 42, 42)
                .addGroup(dialog_aphroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(noaa_jLabel5)
                    .addComponent(noaa_jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dialog_aphroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(time_aphro2, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(coord_aphro2, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(dialog_aphroLayout.createSequentialGroup()
                .addGap(130, 130, 130)
                .addComponent(aphro_cancel)
                .addGap(9, 9, 9)
                .addComponent(aphro_extract))
            .addGroup(dialog_aphroLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(noaa_jLabel4))
            .addGroup(dialog_aphroLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(noaa_jLabel3))
            .addGroup(dialog_aphroLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(aphrodir, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(jButton1))
            .addGroup(dialog_aphroLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(noaa_jLabel24))
            .addGroup(dialog_aphroLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(noaa_jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(dialog_aphroLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(noaa_jLabel1))
        );
        dialog_aphroLayout.setVerticalGroup(
            dialog_aphroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialog_aphroLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(noaa_jLabel1)
                .addGap(13, 13, 13)
                .addComponent(noaa_jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addComponent(noaa_jLabel24)
                .addGap(10, 10, 10)
                .addGroup(dialog_aphroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dialog_aphroLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(aphrodir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1))
                .addGap(20, 20, 20)
                .addComponent(noaa_jLabel3)
                .addGap(15, 15, 15)
                .addGroup(dialog_aphroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dialog_aphroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(noaa_jLabel6)
                        .addComponent(coord_aphro1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(noaa_jLabel5)
                    .addComponent(coord_aphro2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addComponent(noaa_jLabel4)
                .addGap(15, 15, 15)
                .addGroup(dialog_aphroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(noaa_jLabel9)
                    .addComponent(time_aphro1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noaa_jLabel15)
                    .addComponent(time_aphro2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addGroup(dialog_aphroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(aphro_cancel)
                    .addComponent(aphro_extract)))
        );

        dialog_aphroLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {coord_aphro1, coord_aphro2, noaa_jLabel15, noaa_jLabel5, noaa_jLabel6, noaa_jLabel9, time_aphro1, time_aphro2});

        dialog_noaa.setForeground(java.awt.Color.white);
        dialog_noaa.setMinimumSize(new java.awt.Dimension(600, 450));
        dialog_noaa.setResizable(false);

        noaa_label5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        noaa_label5.setText("NOAA SST Observation Data Extractor");

        noaa_label6.setText("<html> This function will download SST observation data from NOAA ESRL, <br> visit https://www.esrl.noaa.gov/psd/gcos_wgsp/Timeseries/ for more information</html>");

        noaa_label7.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        noaa_label7.setText("Select SST Zone");

        combo_sstobs.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nino 1+2", "Nino 3", "Nino 3.4", "Nino 4" }));
        combo_sstobs.setSelectedIndex(2);

        noaa_download.setText("Download");
        noaa_download.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noaa_downloadActionPerformed(evt);
            }
        });

        noaa_cancel.setText("Cancel");
        noaa_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noaa_cancelActionPerformed(evt);
            }
        });

        time_noaa3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                time_noaa3ActionPerformed(evt);
            }
        });

        noaa_jLabel12.setText("From year");

        noaa_jLabel13.setText("To year");

        time_noaa2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                time_noaa2ActionPerformed(evt);
            }
        });

        noaa_jLabel20.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        noaa_jLabel20.setText("Subset timeseries");

        time_noaa4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                time_noaa4ActionPerformed(evt);
            }
        });

        time_noaa1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                time_noaa1ActionPerformed(evt);
            }
        });

        noaa_jLabel25.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        noaa_jLabel25.setText("Baseline anomaly calculation");

        noaa_jLabel16.setText("To year");

        noaa_jLabel17.setText("From year");

        javax.swing.GroupLayout dialog_noaaLayout = new javax.swing.GroupLayout(dialog_noaa.getContentPane());
        dialog_noaa.getContentPane().setLayout(dialog_noaaLayout);
        dialog_noaaLayout.setHorizontalGroup(
            dialog_noaaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialog_noaaLayout.createSequentialGroup()
                .addGroup(dialog_noaaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dialog_noaaLayout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(dialog_noaaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(noaa_jLabel25)
                            .addComponent(noaa_jLabel20)))
                    .addGroup(dialog_noaaLayout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(dialog_noaaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(noaa_jLabel17)
                            .addComponent(noaa_jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(dialog_noaaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(time_noaa3, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(time_noaa1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(dialog_noaaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(dialog_noaaLayout.createSequentialGroup()
                                .addComponent(noaa_jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(time_noaa4, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(dialog_noaaLayout.createSequentialGroup()
                                .addComponent(noaa_jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(time_noaa2, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(dialog_noaaLayout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(noaa_label7))
                    .addGroup(dialog_noaaLayout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(combo_sstobs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(dialog_noaaLayout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(noaa_label6, javax.swing.GroupLayout.PREFERRED_SIZE, 496, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(dialog_noaaLayout.createSequentialGroup()
                .addGroup(dialog_noaaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dialog_noaaLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(noaa_label5, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(dialog_noaaLayout.createSequentialGroup()
                        .addGap(161, 161, 161)
                        .addComponent(noaa_cancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(noaa_download)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        dialog_noaaLayout.setVerticalGroup(
            dialog_noaaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialog_noaaLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(noaa_label5, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(noaa_label6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(noaa_label7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(combo_sstobs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(noaa_jLabel20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dialog_noaaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(noaa_jLabel12)
                    .addComponent(time_noaa1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(time_noaa2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noaa_jLabel13))
                .addGap(33, 33, 33)
                .addComponent(noaa_jLabel25)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dialog_noaaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(time_noaa4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noaa_jLabel17)
                    .addComponent(noaa_jLabel16)
                    .addComponent(time_noaa3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(dialog_noaaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(noaa_cancel)
                    .addComponent(noaa_download))
                .addContainerGap(83, Short.MAX_VALUE))
        );

        dialog_noaaLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {noaa_jLabel12, noaa_jLabel13, time_noaa1, time_noaa2});

        dialog_adjusttemp.setMinimumSize(new java.awt.Dimension(700, 450));
        dialog_adjusttemp.setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("ELEVATION BASED  TEMPERATURE ADJUSTMENT");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel2.setText("Initial elevation (m)");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel3.setText("Select input data");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel4.setText("Select output data");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel5.setText("Adjusted elevation (m)");

        adjusttemp_sourcefile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adjusttemp_sourcefileActionPerformed(evt);
            }
        });

        adjusttemp_initlev.setText("0.0");
        adjusttemp_initlev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adjusttemp_initlevActionPerformed(evt);
            }
        });

        adjusttemp_finallev.setText("0.0");

        adjusttemp_cancel.setText("Cancel");
        adjusttemp_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adjusttemp_cancelActionPerformed(evt);
            }
        });

        adjusttemp_continue.setText("Convert");
        adjusttemp_continue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adjusttemp_continueActionPerformed(evt);
            }
        });

        adjusttemp_outbrowse.setText("Browse");
        adjusttemp_outbrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adjusttemp_outbrowseActionPerformed(evt);
            }
        });

        adjusttemp_sourcebrowse.setText("Browse");
        adjusttemp_sourcebrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adjusttemp_sourcebrowseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dialog_adjusttempLayout = new javax.swing.GroupLayout(dialog_adjusttemp.getContentPane());
        dialog_adjusttemp.getContentPane().setLayout(dialog_adjusttempLayout);
        dialog_adjusttempLayout.setHorizontalGroup(
            dialog_adjusttempLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialog_adjusttempLayout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(dialog_adjusttempLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(dialog_adjusttempLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(dialog_adjusttempLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(adjusttemp_finallev, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(adjusttemp_initlev, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(adjusttemp_sourcefile, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)
                    .addComponent(adjusttemp_outfile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dialog_adjusttempLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(adjusttemp_outbrowse)
                    .addComponent(adjusttemp_sourcebrowse))
                .addGap(81, 81, 81))
            .addGroup(dialog_adjusttempLayout.createSequentialGroup()
                .addGroup(dialog_adjusttempLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dialog_adjusttempLayout.createSequentialGroup()
                        .addGap(242, 242, 242)
                        .addComponent(adjusttemp_cancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(adjusttemp_continue))
                    .addGroup(dialog_adjusttempLayout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(dialog_adjusttempLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(dialog_adjusttempLayout.createSequentialGroup()
                    .addGap(52, 52, 52)
                    .addComponent(jLabel3)
                    .addContainerGap(532, Short.MAX_VALUE)))
        );
        dialog_adjusttempLayout.setVerticalGroup(
            dialog_adjusttempLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialog_adjusttempLayout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(jLabel1)
                .addGap(54, 54, 54)
                .addGroup(dialog_adjusttempLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(adjusttemp_sourcefile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(adjusttemp_sourcebrowse))
                .addGap(17, 17, 17)
                .addGroup(dialog_adjusttempLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(dialog_adjusttempLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(adjusttemp_outfile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(adjusttemp_outbrowse)))
                .addGap(31, 31, 31)
                .addGroup(dialog_adjusttempLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(adjusttemp_initlev, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(dialog_adjusttempLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(adjusttemp_finallev, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(61, 61, 61)
                .addGroup(dialog_adjusttempLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(adjusttemp_cancel)
                    .addComponent(adjusttemp_continue))
                .addContainerGap(70, Short.MAX_VALUE))
            .addGroup(dialog_adjusttempLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(dialog_adjusttempLayout.createSequentialGroup()
                    .addGap(125, 125, 125)
                    .addComponent(jLabel3)
                    .addContainerGap(297, Short.MAX_VALUE)))
        );

        dialog_setrain.setMinimumSize(new java.awt.Dimension(600, 350));
        dialog_setrain.setResizable(false);
        dialog_setrain.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("SET UP OBSERVED RAINFALL DATA");
        dialog_setrain.getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 473, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel7.setText("Define input text file (.txt)");
        dialog_setrain.getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 71, -1, -1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel8.setText("Define initial observation time range  ");
        dialog_setrain.getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 170, -1, -1));
        dialog_setrain.getContentPane().add(setrain_file, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 95, 414, -1));

        setrain_browsefile.setText("Browse");
        setrain_browsefile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setrain_browsefileActionPerformed(evt);
            }
        });
        dialog_setrain.getContentPane().add(setrain_browsefile, new org.netbeans.lib.awtextra.AbsoluteConstraints(471, 94, -1, -1));

        jLabel11.setText("Year");
        dialog_setrain.getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 210, -1, -1));

        jLabel12.setText("Month");
        dialog_setrain.getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 210, -1, -1));

        jLabel13.setText("Day");
        dialog_setrain.getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 210, -1, -1));
        dialog_setrain.getContentPane().add(setrain_time1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 200, 69, 30));
        dialog_setrain.getContentPane().add(setrain_time2, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 200, 69, 30));
        dialog_setrain.getContentPane().add(setrain_time3, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 200, 69, 30));

        setrain_cancel.setText("Cancel");
        setrain_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setrain_cancelActionPerformed(evt);
            }
        });
        dialog_setrain.getContentPane().add(setrain_cancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 270, 87, -1));

        setrain_continue.setText("Continue");
        setrain_continue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setrain_continueActionPerformed(evt);
            }
        });
        dialog_setrain.getContentPane().add(setrain_continue, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 270, -1, -1));

        dialog_settemp.setMinimumSize(new java.awt.Dimension(600, 350));
        dialog_settemp.setResizable(false);

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel17.setText("SET UP OBSERVED TEMPERATURE DATA");

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel18.setText("Define input text file (.txt)");

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel19.setText("Define initial observation time range ");

        settemp_filebrowse.setText("Browse");
        settemp_filebrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settemp_filebrowseActionPerformed(evt);
            }
        });

        jLabel22.setText("Year");

        jLabel23.setText("Month");

        jLabel24.setText("Day");

        settemp_cancel.setText("Cancel");
        settemp_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settemp_cancelActionPerformed(evt);
            }
        });

        settemp_continue.setText("Continue");
        settemp_continue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settemp_continueActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dialog_settempLayout = new javax.swing.GroupLayout(dialog_settemp.getContentPane());
        dialog_settemp.getContentPane().setLayout(dialog_settempLayout);
        dialog_settempLayout.setHorizontalGroup(
            dialog_settempLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialog_settempLayout.createSequentialGroup()
                .addGroup(dialog_settempLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dialog_settempLayout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(dialog_settempLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19)
                            .addComponent(jLabel18)
                            .addGroup(dialog_settempLayout.createSequentialGroup()
                                .addComponent(settemp_file, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(settemp_filebrowse))))
                    .addGroup(dialog_settempLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(dialog_settempLayout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(settemp_time1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(jLabel23)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(settemp_time2, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(jLabel24)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(settemp_time3, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(dialog_settempLayout.createSequentialGroup()
                        .addGap(168, 168, 168)
                        .addComponent(settemp_cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(settemp_continue)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        dialog_settempLayout.setVerticalGroup(
            dialog_settempLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialog_settempLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel17)
                .addGap(18, 18, 18)
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dialog_settempLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(settemp_file, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(settemp_filebrowse))
                .addGap(47, 47, 47)
                .addComponent(jLabel19)
                .addGap(18, 18, 18)
                .addGroup(dialog_settempLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(jLabel23)
                    .addComponent(jLabel24)
                    .addComponent(settemp_time1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(settemp_time2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(settemp_time3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(dialog_settempLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(settemp_cancel)
                    .addComponent(settemp_continue))
                .addContainerGap(57, Short.MAX_VALUE))
        );

        dialog_setpredict.setMinimumSize(new java.awt.Dimension(600, 350));
        dialog_setpredict.setResizable(false);

        jLabel28.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel28.setText("SET UP PREDICTOR INPUT (OBSERVATION DATA)");

        jLabel29.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel29.setText("Define input text file (.txt)");

        jLabel30.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel30.setText("Define initial time range (monthly data only)");

        setpredict_browsefile.setText("Browse");
        setpredict_browsefile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setpredict_browsefileActionPerformed(evt);
            }
        });

        jLabel33.setText("Year");

        jLabel34.setText("Month");

        setpredict_cancel.setText("Cancel");
        setpredict_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setpredict_cancelActionPerformed(evt);
            }
        });

        setpredict_continue.setText("Continue");
        setpredict_continue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setpredict_continueActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dialog_setpredictLayout = new javax.swing.GroupLayout(dialog_setpredict.getContentPane());
        dialog_setpredict.getContentPane().setLayout(dialog_setpredictLayout);
        dialog_setpredictLayout.setHorizontalGroup(
            dialog_setpredictLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialog_setpredictLayout.createSequentialGroup()
                .addGroup(dialog_setpredictLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dialog_setpredictLayout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(dialog_setpredictLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel30)
                            .addComponent(jLabel29)
                            .addGroup(dialog_setpredictLayout.createSequentialGroup()
                                .addComponent(setpredict_file, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(setpredict_browsefile))
                            .addGroup(dialog_setpredictLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel33)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(setpredict_time1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(jLabel34)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(setpredict_time2, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(dialog_setpredictLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(dialog_setpredictLayout.createSequentialGroup()
                        .addGap(163, 163, 163)
                        .addComponent(setpredict_cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(setpredict_continue)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        dialog_setpredictLayout.setVerticalGroup(
            dialog_setpredictLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialog_setpredictLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel28)
                .addGap(18, 18, 18)
                .addComponent(jLabel29)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dialog_setpredictLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setpredict_file, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setpredict_browsefile))
                .addGap(32, 32, 32)
                .addComponent(jLabel30)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(dialog_setpredictLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel33)
                    .addComponent(jLabel34)
                    .addComponent(setpredict_time1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setpredict_time2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(dialog_setpredictLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setpredict_cancel)
                    .addComponent(setpredict_continue))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        dialog_setfuture.setMinimumSize(new java.awt.Dimension(600, 350));
        dialog_setfuture.setResizable(false);

        jLabel31.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel31.setText("SET UP PROJECTED DATA FOR SIMULATION");

        jLabel32.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel32.setText("Define input text file (.txt)");

        jLabel35.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel35.setText("Define initial time range (monthly data only)");

        setpredict_browsefile1.setText("Browse");
        setpredict_browsefile1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setpredict_browsefile1ActionPerformed(evt);
            }
        });

        jLabel36.setText("Year");

        jLabel37.setText("Month");

        setfuture_cancel.setText("Cancel");
        setfuture_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setfuture_cancelActionPerformed(evt);
            }
        });

        setfuture_continue.setText("Continue");
        setfuture_continue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setfuture_continueActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dialog_setfutureLayout = new javax.swing.GroupLayout(dialog_setfuture.getContentPane());
        dialog_setfuture.getContentPane().setLayout(dialog_setfutureLayout);
        dialog_setfutureLayout.setHorizontalGroup(
            dialog_setfutureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialog_setfutureLayout.createSequentialGroup()
                .addGroup(dialog_setfutureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dialog_setfutureLayout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(dialog_setfutureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel35)
                            .addComponent(jLabel32)
                            .addGroup(dialog_setfutureLayout.createSequentialGroup()
                                .addComponent(setfuture_file, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(setpredict_browsefile1))
                            .addGroup(dialog_setfutureLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel36)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(setfuture_time1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(jLabel37)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(setfuture_time2, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(dialog_setfutureLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(dialog_setfutureLayout.createSequentialGroup()
                        .addGap(167, 167, 167)
                        .addComponent(setfuture_cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(setfuture_continue)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        dialog_setfutureLayout.setVerticalGroup(
            dialog_setfutureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialog_setfutureLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel31)
                .addGap(18, 18, 18)
                .addComponent(jLabel32)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(dialog_setfutureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setfuture_file, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setpredict_browsefile1))
                .addGap(47, 47, 47)
                .addComponent(jLabel35)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(dialog_setfutureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel36)
                    .addComponent(jLabel37)
                    .addComponent(setfuture_time1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setfuture_time2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(dialog_setfutureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setfuture_cancel)
                    .addComponent(setfuture_continue))
                .addContainerGap(55, Short.MAX_VALUE))
        );

        dialog_modelbuild.setMinimumSize(new java.awt.Dimension(400, 250));
        dialog_modelbuild.setResizable(false);

        jLabel39.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel39.setText("MODEL BUILDING TIME SETUP");

        jLabel42.setText("Start year:");

        jLabel43.setText("Start month:");

        simtime1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simtime1ActionPerformed(evt);
            }
        });

        simtime_continue.setText("Generate");
        simtime_continue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simtime_continueActionPerformed(evt);
            }
        });

        simtime_cancel.setText("Cancel");
        simtime_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simtime_cancelActionPerformed(evt);
            }
        });

        jLabel50.setText("End year:");

        jLabel51.setText("End month:");

        simtime3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simtime3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dialog_modelbuildLayout = new javax.swing.GroupLayout(dialog_modelbuild.getContentPane());
        dialog_modelbuild.getContentPane().setLayout(dialog_modelbuildLayout);
        dialog_modelbuildLayout.setHorizontalGroup(
            dialog_modelbuildLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialog_modelbuildLayout.createSequentialGroup()
                .addGroup(dialog_modelbuildLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(dialog_modelbuildLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel39))
                    .addGroup(dialog_modelbuildLayout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addComponent(simtime_cancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(simtime_continue))
                    .addGroup(dialog_modelbuildLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(dialog_modelbuildLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, dialog_modelbuildLayout.createSequentialGroup()
                                .addComponent(jLabel42)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(simtime1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel43)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(simtime2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, dialog_modelbuildLayout.createSequentialGroup()
                                .addComponent(jLabel50)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(simtime3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel51)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(simtime4, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        dialog_modelbuildLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {simtime1, simtime2});

        dialog_modelbuildLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {simtime_cancel, simtime_continue});

        dialog_modelbuildLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {simtime3, simtime4});

        dialog_modelbuildLayout.setVerticalGroup(
            dialog_modelbuildLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialog_modelbuildLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel39)
                .addGap(31, 31, 31)
                .addGroup(dialog_modelbuildLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel42)
                    .addComponent(simtime1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(simtime2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel43))
                .addGap(18, 18, 18)
                .addGroup(dialog_modelbuildLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel50)
                    .addComponent(simtime3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(simtime4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel51))
                .addGap(42, 42, 42)
                .addGroup(dialog_modelbuildLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(simtime_cancel)
                    .addComponent(simtime_continue))
                .addContainerGap(50, Short.MAX_VALUE))
        );

        dialog_projectnotset.setAlwaysOnTop(true);
        dialog_projectnotset.setMinimumSize(new java.awt.Dimension(300, 200));

        jLabel52.setText("please create new project");

        button_overwrite1.setText("OK");
        button_overwrite1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_overwrite1ActionPerformed(evt);
            }
        });

        jLabel53.setText("PROJECT NOT SET");

        javax.swing.GroupLayout dialog_projectnotsetLayout = new javax.swing.GroupLayout(dialog_projectnotset.getContentPane());
        dialog_projectnotset.getContentPane().setLayout(dialog_projectnotsetLayout);
        dialog_projectnotsetLayout.setHorizontalGroup(
            dialog_projectnotsetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialog_projectnotsetLayout.createSequentialGroup()
                .addGap(91, 91, 91)
                .addGroup(dialog_projectnotsetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(button_overwrite1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel52)
                    .addComponent(jLabel53))
                .addContainerGap(82, Short.MAX_VALUE))
        );
        dialog_projectnotsetLayout.setVerticalGroup(
            dialog_projectnotsetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialog_projectnotsetLayout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addComponent(jLabel53)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel52)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(button_overwrite1)
                .addGap(25, 25, 25))
        );

        dialog_overwrite.setAlwaysOnTop(true);
        dialog_overwrite.setMinimumSize(new java.awt.Dimension(300, 200));
        dialog_overwrite.getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel46.setText("File exists, overwrite file?");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(28, 34, 0, 30);
        dialog_overwrite.getContentPane().add(jLabel46, gridBagConstraints);

        button_overwrite.setText("OK");
        button_overwrite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_overwriteActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 22;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 12, 40, 30);
        dialog_overwrite.getContentPane().add(button_overwrite, gridBagConstraints);

        button_nowrite.setText("Cancel");
        button_nowrite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_nowriteActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 25, 40, 0);
        dialog_overwrite.getContentPane().add(button_nowrite, gridBagConstraints);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("AWGenSCP");
        setIconImage(Toolkit.getDefaultToolkit().getImage(main.class.getResource("logo_help.png")));
        setName(""); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        jPanel1.setMinimumSize(new java.awt.Dimension(250, 100));

        jLabel44.setText("Project Setup Parameter");

        jScrollPane5.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane5.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        table_projectview.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        table_projectview.setModel(new javax.swing.table.DefaultTableModel(
            //new Object [][] {
                //    {"Input data", ""},
                //    {"  - Rainfall input", "Not set"},
                //    {"  - Temp input", "Not set"},
                //    {"  - Predictor input", "Not set"},
                //    {"Rain model", ""},
                //    {"  - Data Pair ", "Not set"},
                //    {"  - Prob. regression param", "Not set"},
                //    {"  - Dist. regression param", "Not set"},
                //    {"Temperature model", ""},
                //    {"  - Data Pair ", "Not set"},
                //    {"  - Prob. regression param", "Not set"},
                //    {"  - Dist. regression param", "Not set"},
                //},
            table_setupobj,
            new String [] {
                "", ""
            }
        ));

        // set width
        table_projectview.getColumnModel().getColumn(0).setPreferredWidth(175);
        table_projectview.getColumnModel().getColumn(1).setPreferredWidth(75);
        table_projectview.setCellSelectionEnabled(true);
        table_projectview.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        table_projectview.setFocusable(false);
        table_projectview.setMinimumSize(new java.awt.Dimension(250, 48));
        table_projectview.setTableHeader(null);
        table_projectview.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_projectviewMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(table_projectview);
        table_projectview.setTableHeader(null);

        jLabel45.setText("Project Result Viewer");

        jScrollPane6.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane6.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane6.setMinimumSize(new java.awt.Dimension(250, 170));
        jScrollPane6.setPreferredSize(new java.awt.Dimension(250, 166));

        table_resultview.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        table_resultview.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Daily Result", ""},
                {"  - Rain ensemble", "Not set"},
                {"  - Temp. ensemble", "Not set"},
                {"  - Rain ens. mean", "Not set"},
                {"  - Temp. ens. mean", "Not set"},
                {"Monthly Result", ""},
                {"  - Rain ensemble", "Not set"},
                {"  - Temp. ensemble", "Not set"},
                {"  - Rain ens. mean", "Not set"},
                {"  - Temp. ens. mean", "Not set"},
            },
            new String [] {
                "", ""
            }
        ));

        // set width
        table_resultview.getColumnModel().getColumn(0).setPreferredWidth(175);
        table_resultview.getColumnModel().getColumn(1).setPreferredWidth(75);
        table_resultview.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        table_resultview.setCellSelectionEnabled(true);
        table_resultview.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        table_resultview.setFocusable(false);
        table_resultview.setMinimumSize(new java.awt.Dimension(250, 170));
        table_resultview.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_resultviewMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(table_resultview);
        table_resultview.setTableHeader(null);

        jLabel49.setText("Simulation Parameter");

        jLabel47.setText("View Result");

        main_table.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        main_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        main_table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane3.setViewportView(main_table);

        maincontrol.setEditable(false);
        maincontrol.setColumns(5);
        maincontrol.setRows(5);
        maincontrol.setMinimumSize(new java.awt.Dimension(950, 170));
        jScrollPane2.setViewportView(maincontrol);

        jLabel48.setText("Command Line Output");

        jScrollPane7.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane7.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        table_simview.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        //
        table_simview.setModel(new javax.swing.table.DefaultTableModel(
            table_configobj,
            new String [] {
                "", ""
            }
        ));

        // set width
        table_simview.getColumnModel().getColumn(0).setPreferredWidth(175);
        table_simview.getColumnModel().getColumn(1).setPreferredWidth(75);

        //
        table_simview.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        table_simview.setFocusable(false);
        table_simview.setMinimumSize(new java.awt.Dimension(250, 115));
        table_simview.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_simviewMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(table_simview);
        table_simview.setTableHeader(null);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel45)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel44)
                    .addComponent(jLabel49)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(jLabel47))
                            .addComponent(jLabel48, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 620, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel47)
                    .addComponent(jLabel44))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel49)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(0, 19, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel45)
                    .addComponent(jLabel48))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22))
        );

        getContentPane().add(jPanel1);

        fileoption.setText("File");
        fileoption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileoptionActionPerformed(evt);
            }
        });

        newproject.setText("New Project");
        newproject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newprojectActionPerformed(evt);
            }
        });
        fileoption.add(newproject);

        loadproject.setText("Load Project");
        loadproject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadprojectActionPerformed(evt);
            }
        });
        fileoption.add(loadproject);

        saveproject.setText("Save Project");
        saveproject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveprojectActionPerformed(evt);
            }
        });
        fileoption.add(saveproject);

        saveas.setText("Save Project As");
        saveas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveasActionPerformed(evt);
            }
        });
        fileoption.add(saveas);

        closeproject.setText("close Project");
        closeproject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeprojectActionPerformed(evt);
            }
        });
        fileoption.add(closeproject);
        fileoption.add(jSeparator1);

        export.setText("Export Table");
        export.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportActionPerformed(evt);
            }
        });
        fileoption.add(export);
        fileoption.add(jSeparator2);

        exitproject.setText("Exit");
        exitproject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitprojectActionPerformed(evt);
            }
        });
        fileoption.add(exitproject);

        mainmenu.add(fileoption);

        setupoption.setText("Model Setup");

        setuprain.setText("Setup rainfall data");
        setuprain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setuprainActionPerformed(evt);
            }
        });
        setupoption.add(setuprain);

        setuptemp.setText("Setup temperature data");
        setuptemp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setuptempActionPerformed(evt);
            }
        });
        setupoption.add(setuptemp);

        setuppredictor.setText("Setup predictor data");
        setuppredictor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setuppredictorActionPerformed(evt);
            }
        });
        setupoption.add(setuppredictor);

        setupsimulation.setText("Setup simulation data");
        setupsimulation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setupsimulationActionPerformed(evt);
            }
        });
        setupoption.add(setupsimulation);

        mainmenu.add(setupoption);

        buildoption.setText("Build Simulation");

        modelbuild.setText("Set model build time");
        modelbuild.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modelbuildActionPerformed(evt);
            }
        });
        buildoption.add(modelbuild);

        predictor_format.setText("Structuring predictor data");
        predictor_format.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                predictor_formatActionPerformed(evt);
            }
        });
        buildoption.add(predictor_format);

        rainsetup.setText("Generate rain model stats");
        rainsetup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rainsetupActionPerformed(evt);
            }
        });
        buildoption.add(rainsetup);

        rainregress.setText("Gererate rain regress model");
        rainregress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rainregressActionPerformed(evt);
            }
        });
        buildoption.add(rainregress);

        tempsetup.setText("Generate temp model stats");
        tempsetup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tempsetupActionPerformed(evt);
            }
        });
        buildoption.add(tempsetup);

        tempregress.setText("Generate temp regress model");
        tempregress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tempregressActionPerformed(evt);
            }
        });
        buildoption.add(tempregress);

        mainmenu.add(buildoption);

        runoption.setText("Run Simulation");

        run_rain.setText("Run rainfall simulation");
        run_rain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                run_rainActionPerformed(evt);
            }
        });
        runoption.add(run_rain);

        run_temp.setText("Run temperature simulation");
        run_temp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                run_tempActionPerformed(evt);
            }
        });
        runoption.add(run_temp);

        getrain_meanens.setText("Run rainfall ensemble mean");
        getrain_meanens.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getrain_meanensActionPerformed(evt);
            }
        });
        runoption.add(getrain_meanens);

        gettemp_meanens.setText("Run temperature ensemble mean");
        gettemp_meanens.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gettemp_meanensActionPerformed(evt);
            }
        });
        runoption.add(gettemp_meanens);

        mainmenu.add(runoption);

        postprocess.setText("Post Processing");

        getrain_monthens.setText("Calculate monthly rainfall ensemble");
        getrain_monthens.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getrain_monthensActionPerformed(evt);
            }
        });
        postprocess.add(getrain_monthens);

        gettemp_monthens.setText("Calculate monthly temperature ensemble");
        gettemp_monthens.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gettemp_monthensActionPerformed(evt);
            }
        });
        postprocess.add(gettemp_monthens);

        getrain_monthensmean.setText("Calculate monthly rainfall ens mean");
        getrain_monthensmean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getrain_monthensmeanActionPerformed(evt);
            }
        });
        postprocess.add(getrain_monthensmean);

        gettemp_monthensmean.setText("Calculate monthly temperature ens mean");
        gettemp_monthensmean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gettemp_monthensmeanActionPerformed(evt);
            }
        });
        postprocess.add(gettemp_monthensmean);

        mainmenu.add(postprocess);

        extrasoption.setText("Extras");

        aphrosetup.setText("APHRODITE data extractor");
        aphrosetup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aphrosetupActionPerformed(evt);
            }
        });
        extrasoption.add(aphrosetup);

        sstsetup.setText("NOAA SST data extractor");
        sstsetup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sstsetupActionPerformed(evt);
            }
        });
        extrasoption.add(sstsetup);

        cfsv2setup.setText("CFSv2 data extractor");
        cfsv2setup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cfsv2setupActionPerformed(evt);
            }
        });
        extrasoption.add(cfsv2setup);

        mainmenu.add(extrasoption);

        aboutoption.setText("About");

        tutorial.setText("View documentation");
        tutorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tutorialActionPerformed(evt);
            }
        });
        aboutoption.add(tutorial);

        help.setText("About");
        help.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpActionPerformed(evt);
            }
        });
        aboutoption.add(help);

        mainmenu.add(aboutoption);

        setJMenuBar(mainmenu);

        pack();
    }// </editor-fold>//GEN-END:initComponents

// -------------------------- variable definition---------------------------

// project main definition
String projectname="Not set";
String projectdir="Not set";
String installdir="Not set";
String projectid="Not set";
int seasonal=1;
int projectsave=0;
int projectime[]=new int[4];
String[] createproject=new String[33];

    
// project file input definition    
String[][] table_setupfile=new String[13][2];
Object[][] table_setupobj=new Object[13][2];
String[][] table_configfile=new String[6][2];
Object[][] table_configobj=new Object[6][2];
String[][] table_finalfile=new String[10][2];
Object[][] table_finalobj=new Object[10][2];

// test string function
String mainstring = "this String";

// overwrite funtion
File overwrite_file=new File("");

// ---------------------------function definition-------------------------------

public void checkproject(){
    
    // check project name
    if (projectname.equals("Not set")){
        dialog_projectnotset.setVisible(true);
        dialog_projectnotset.setLocationRelativeTo(null);
        createproject();
        dialog_projectnotset.dispose();
    } 
}


public void settable_setupfile_default() {
            
    // 1st col
    table_setupfile[0][0]="Input data";
    table_setupfile[1][0]="  - Rainfall input";
    table_setupfile[2][0]="  - Temperature input";
    table_setupfile[3][0]="  - Predictor input";
    table_setupfile[4][0]="  - Simulation input";
    table_setupfile[5][0]="Rain model";
    table_setupfile[6][0]="  - Data statistics";
    table_setupfile[7][0]="  - Regression param";
    table_setupfile[8][0]="Temperature model";
    table_setupfile[9][0]="  - Data statistics";
    table_setupfile[10][0]="  - Regression param";
    table_setupfile[11][0]="Predictor ";
    table_setupfile[12][0]="  - Data statistics";
    
    // 2nd col
    table_setupfile[0][1]="";
    table_setupfile[1][1]="Not set";
    table_setupfile[2][1]="Not set";
    table_setupfile[3][1]="Not set";
    table_setupfile[4][1]="Not set";
    table_setupfile[5][1]="";
    table_setupfile[6][1]="Not set";
    table_setupfile[7][1]="Not set";
    table_setupfile[8][1]="";
    table_setupfile[9][1]="Not set";
    table_setupfile[10][1]="Not set";
    table_setupfile[11][1]="";
    table_setupfile[12][1]="Not set";
}


 public void settable_configfile_default(){
    // 1st col
    table_configfile[0][0]="Model set up";
    table_configfile[1][0]="  - Initial time";
    table_configfile[2][0]="  - End time";
    table_configfile[3][0]="Simulation set up";
    table_configfile[4][0]="  - Initial time";
    table_configfile[5][0]="  - End time";
    
    // 2nd col
    table_configfile[0][1]="";
    table_configfile[1][1]="Not set";
    table_configfile[2][1]="Not set";
    table_configfile[3][1]="";
    table_configfile[4][1]="Not set";
    table_configfile[5][1]="Not set";
}    

 
 public void settable_resultfile_default() {
            
    // 1st col
    table_finalfile[0][0]="Daily Results";
    table_finalfile[1][0]="  - Rain ensemble";
    table_finalfile[2][0]="  - Temp. ensemble";
    table_finalfile[3][0]="  - Rain ens. mean";
    table_finalfile[4][0]="  - Temp ens. mean";
    table_finalfile[5][0]="Monthly results";
    table_finalfile[6][0]="  - Rain ensemble";
    table_finalfile[7][0]="  - Temp. ensemble";
    table_finalfile[8][0]="  - Rain ens. mean";
    table_finalfile[9][0]="  - Temp ens. mean";
    
    // 2nd col
    table_finalfile[0][1]="";
    table_finalfile[1][1]="Not set";
    table_finalfile[2][1]="Not set";
    table_finalfile[3][1]="Not set";
    table_finalfile[4][1]="Not set";
    table_finalfile[5][1]="";
    table_finalfile[6][1]="Not set";
    table_finalfile[7][1]="Not set";
    table_finalfile[8][1]="Not set";
    table_finalfile[9][1]="Not set";

}
 
 
 public void new_createproject(){
    
    //create project array
    createproject[0]=projectname;
    createproject[1]=projectdir;
    createproject[2]="";
    createproject[3]="Not set";
    createproject[4]="Not set";
    createproject[5]="Not set";
    createproject[6]="Not set";
    createproject[7]="";
    createproject[8]="Not set";
    createproject[9]="Not set";
    createproject[10]="";
    createproject[11]="Not set";
    createproject[12]="Not set";
    createproject[13]="";
    createproject[14]="Not set";
    //
    createproject[15]="";
    createproject[16]="Not set";
    createproject[17]="Not set";
    createproject[18]="";
    createproject[19]="Not set";
    createproject[20]="Not set";
    //
    createproject[21]="";
    createproject[22]="Not set";
    createproject[23]="Not set";
    createproject[24]="Not set";
    createproject[25]="Not set";
    createproject[26]="";
    createproject[27]="Not set";
    createproject[28]="Not set";
    createproject[29]="Not set";
    createproject[30]="Not set";
    createproject[31]="";
    createproject[32]=projectid;
    
    System.out.println("+\nprojectname:"+createproject[0]);
    System.out.println("projectdir:"+createproject[1]);
    System.out.println("projectid:"+createproject[32]);
}   
 
 
public void settable_setup_object(){
    
    // get table dimension
    int row=table_setupobj.length;
    int col=table_setupobj[0].length;
    
    // loop each file
    for (int i=0;i<row;i++){
        
        //setup 1st col
        table_setupobj[i][0]=table_setupfile[i][0];
        
        //setup 2nd col
        if (table_setupfile[i][1].equals("Not set")) {
            table_setupobj[i][1]="Not set";   
        } else if (table_setupfile[i][1].equals("")) {
            table_setupobj[i][1]="";
        } else {
            table_setupobj[i][1]="view data";
        }
    }
}
    
 
public void settable_setup_write(){
    
        // sett able dimension
        int row=table_setupobj.length;
        int col=table_setupobj[0].length;
    
         // set table value
            for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                table_projectview.getModel().setValueAt(table_setupobj[i][j], i, j);
            }
            }
}
 

 public void settable_config_object(){
    
    // get table dimension
    int row=table_configobj.length;
    int col=table_configobj[0].length;
    
    // loop each file
    for (int i=0;i<row;i++){
        
        //setup 1st col
        table_configobj[i][0]=table_configfile[i][0];
        
        //setup 2nd col
        if (table_configfile[i][1].equals("Not set")) {
            table_configobj[i][1]="Not set";   
        } else if (table_configfile[i][1].equals("")) {
            table_configobj[i][1]="";
        } else {
            table_configobj[i][1]=table_configfile[i][1];
        }
    }
}
 
 
 public void settable_config_write(){
    
        // sett able dimension
        int row=table_configobj.length;
        int col=table_configobj[0].length;
    
         // set table value
            for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                table_simview.getModel().setValueAt(table_configobj[i][j], i, j);
            }
            }
}


public void settable_result_object(){
    
    // get table dimension
    int row=table_finalobj.length;
    int col=table_finalobj[0].length;
    
    // loop each file
    for (int i=0;i<row;i++){
        
        //setup 1st col
        table_finalobj[i][0]=table_finalfile[i][0];
        
        //setup 2nd col
        if (table_finalfile[i][1].equals("Not set")) {
            table_finalobj[i][1]="Not set";   
        } else if (table_finalfile[i][1].equals("")) {
            table_finalobj[i][1]="";
        } else {
            table_finalobj[i][1]="view data";
        }
    }
}
    
 
public void settable_result_write(){
    
        // sett able dimension
        int row=table_finalobj.length;
        int col=table_finalobj[0].length;
    
         // set table value
            for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                table_resultview.getModel().setValueAt(table_finalobj[i][j], i, j);
            }
            }
}


public int checkExist(File file) {
    int exist=0;
    // check if file exist
    if (file.exists()) {
        exist=1;
    }
    return exist;
}


public String checkExtension(File file, String ext) {        
    
    // check file extension
    String extension = getFileExtension(file);
    String file_export = new String();
    
    // rewrite filename
    if (extension.equals(ext)) {
    file_export=file.getAbsolutePath();
    } else {
        file_export=file.getAbsolutePath()+"."+ext;
    }
    
    return file_export;
}


public static String getFileExtension(File file) {
    String fileName = file.getName();
    if(fileName.lastIndexOf(".") != -1 && fileName.lastIndexOf(".") != 0)
    return fileName.substring(fileName.lastIndexOf(".")+1);
    else return "";
}


public void savetable(String filename) {
    // String filename="javaout.txt"
    
    // obtain table value
    TableModel model = main_table.getModel();
    int col = model.getColumnCount();
    int row = model.getRowCount();
    Object[][] nums = new Object[row][col];
    
    // loop to add data to array
    for (int i=0; i<row; i++) {
    for (int j=0; j<col; j++) {    
    nums[i][j]=model.getValueAt(i,j);   
    }    
    }
    
    // write to file
    try{
    BufferedWriter writer = new BufferedWriter(new FileWriter(filename));
    for (int i=0; i<row; i++) {
        String testline = new String();
        for (int j=0; j<col; j++) {   
            String val = String.valueOf(nums[i][j]);
            if (j!=0) {
            testline= testline+","+val;
            } else {
            testline= val;    
            }
        }    
        writer.write(testline);
        writer.write("\n");
    }
    writer.close();
    } catch (IOException ex) {
        Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
        maincontrol.setText("table export failed");
    }
}


public void donwloadWeb(String thisweb,String thisfile) {
        try {       
            URL website = new URL(thisweb);
            ReadableByteChannel rbc = Channels.newChannel(website.openStream());
            FileOutputStream fos = new FileOutputStream(thisfile);
            fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);
            //maincontrol.setText("download complete");
        } catch (MalformedURLException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            maincontrol.setText("download failed");
        } catch (IOException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            maincontrol.setText("download failed");
        }
}


public void getstartend(String thisfile) {
        //maincontrol.setText("Tryin to read data at "+thisfile+" \n");
        Scanner scanner;
        int columns = 1;
        int row = 1;
        String [] getlabel = new String [1];
        float [][] nums = new float [1][1];
        
        // begin try reading
        try {
            // define scanner
            scanner = new Scanner(new File(thisfile));
            scanner.useDelimiter(",");
            
            // define column and row
            row = Integer.parseInt(scanner.nextLine());
            columns = Integer.parseInt(scanner.nextLine());
            maincontrol.append("row " + Integer.toString(row) + " col " + Integer.toString(columns) + "\n");

            // read label line
            String linelabel = scanner.nextLine();
            String[] labelfields = linelabel.split(",");
            
            //  store label
            getlabel = new String[columns];
            for (int i = 0; i < columns; i++) {
                getlabel[i] = labelfields[i];
            }
            
            // create table array to store data
            nums = new float[row][columns];
            
            // reading data
            for (int i = 0; i < row; i++) {
            String line = scanner.nextLine();
            String[] fields = line.split(",");
            for (int j = 0; j < columns; j++) {
            nums[i][j] = Float.parseFloat(fields[j]);
            }
            }  
            scanner.close();
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
        }
            
        // get minimum and maximum time
        int last=nums.length-1;
        String startyear=String.valueOf((int)nums[0][0]);
        String startmonth=String.valueOf((int)nums[0][1]);
        String endyear=String.valueOf((int)nums[last][0]);
        String endmonth=String.valueOf((int)nums[last][1]);
        
        // writing info to main windows
        DecimalFormat fmt = new DecimalFormat("00");
        //table_configfile[1][1]=simtime1.getText()+"/"+fmt.format(projectime[1]);
        //table_configfile[2][1]=simtime3.getText()+"/"+fmt.format(projectime[3]);
        
        table_configfile[4][1]=startyear+"/"+fmt.format(nums[0][1]);
        table_configfile[5][1]=endyear+"/"+fmt.format(nums[last][1]);
        createproject[19]=table_configfile[4][1];
        createproject[20]=table_configfile[5][1];
        
        // Notify windows
        maincontrol.setText("Model building set from: "+createproject[19]+" to "+createproject[20]);
        settable_config_object();
        settable_config_write();
}


public void show_table(String thisfile) {
        maincontrol.setText("reading data \n");
        Scanner scanner;
        int columns = 1;
        int row = 1;
        String [] getlabel = new String [1];
        float [][] nums = new float [1][1];
        
        // begin try reading
        try {
            // define scanner
            scanner = new Scanner(new File(thisfile));
            scanner.useDelimiter(",");
            
            // define column and row
            row = Integer.parseInt(scanner.nextLine());
            columns = Integer.parseInt(scanner.nextLine());
            //maincontrol.append("row " + Integer.toString(row) + " col " 
            //        + Integer.toString(columns) + "\n");

            // read label line
            String linelabel = scanner.nextLine();
            String[] labelfields = linelabel.split(",");
            
            //  store label
            getlabel = new String[columns];
            for (int i = 0; i < columns; i++) {
                getlabel[i] = labelfields[i];
            }
            
            // create table array to store data
            nums = new float[row][columns];
            
            // reading data
            for (int i = 0; i < row; i++) {
            String line = scanner.nextLine();
            String[] fields = line.split(",");
            for (int j = 0; j < columns; j++) {
            nums[i][j] = Float.parseFloat(fields[j]);
            }
            }  
            scanner.close();
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
        }
            
            // create table model
            DefaultTableModel tablemodel = new DefaultTableModel();
            
            // create table column
            for (int j = 0; j < columns; j++) {
            tablemodel.addColumn(getlabel[j]);
            }
            main_table.setModel(tablemodel);
            
            // create table row
            for (int i = 0; i < row; i++) {
            tablemodel.addRow(new Object[] {""});
            }
            main_table.setModel(tablemodel);
            
            // set value
            for (int i = 0; i < row; i++) {
            for (int j = 0; j < columns; j++) {
                main_table.getModel().setValueAt(nums[i][j], i, j);
            }
            }   
}


public void test_createproject(){
    
    //overwrite project name and directory
    projectname="";
    projectdir="C:/Users/andung/dropbox_geo/Dropbox/hibah_2018/awgenscp/src/octave_script/";

    //create project array
    createproject[0]=projectname;
    createproject[1]=projectdir;
    createproject[2]="";
    createproject[3]="rain.awg";
    createproject[4]="temp.awg";
    createproject[5]="predict_now.awg";
    createproject[6]="predict_future.awg";
    createproject[7]="";
    createproject[8]="rain_param.awg";
    createproject[9]="rain_regress.awg";
    createproject[10]="";
    createproject[11]="temp_param.awg";
    createproject[12]="temp_regress.awg";
    createproject[13]="";
    createproject[14]="predict_now.awg";
    //
    createproject[15]="";
    createproject[16]="1990/01";
    createproject[17]="1991/12";
    createproject[18]="";
    createproject[19]="1989/01";
    createproject[20]="2014/01";
    //
    createproject[21]="";
    createproject[22]="rain_sim.awg";
    createproject[23]="temp_sim.awg";
    createproject[24]="rain_sim_meanens.awg";
    createproject[25]="temp_sim_meanens.awg";
    createproject[26]="";
    createproject[27]="rain_monthsim.awg";
    createproject[28]="temp_monthsim.awg";
    createproject[29]="rain_monthsim_meanens.awg";
    createproject[30]="temp_monthsim_meanens.awg";
    
}   


public void saveproject(String filename){

    // get table dimension
    int row=createproject.length;

    // write to file
    try{
    BufferedWriter writer = new BufferedWriter(new FileWriter(filename));
    for (int i=0; i<row; i++) {
        writer.write(createproject[i]);
        writer.write("\n");
    }
    writer.close();
    } catch (IOException ex) {
        Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
        maincontrol.setText("table export failed");
    }
}


public void loadproject(String filename){
        Scanner scanner;
    
        // begin try reading
        try {
            
            // define scanner
            scanner = new Scanner(new File(filename));
            scanner.useDelimiter(",");
            
            // define column and row
            int row=createproject.length;
            //maincontrol.setText(Integer.toString(row)+"\n");
            
            //  store label filepath
            for (int i = 0; i < row; i++) {
                createproject[i] = scanner.nextLine();
                //maincontrol.append(createproject[i] + "\n" );
            }
            
            //close scanner
            scanner.close();

            // read project label line
            projectname=createproject[0];
            projectdir=createproject[1];
            projectid=createproject[32];
            maincontrol.setText("project set to:" + projectdir+projectname + "\n");
            
            // notify command prompt
            System.out.println("+\nprojectname:"+projectname);
            System.out.println("projectdir:"+projectdir);
            System.out.println("projectid:"+projectid);
            
            //formatting table 1
            row=table_setupfile.length;
            for (int i=0;i<row;i++){
            table_setupfile[i][1]=createproject[i+2];
            }
            
            //formating table 2
            row=table_configfile.length;
            for (int i=0;i<row;i++){
            table_configfile[i][1]=createproject[i+15];
            }
            
            //formating table 3
            row=table_finalfile.length;
            for (int i=0;i<row;i++){
            table_finalfile[i][1]=createproject[i+21];
            }
            
            // overide 1st table
            settable_setup_object();
            settable_setup_write();
    
            // overide 2nd table
            settable_config_object();
            settable_config_write();
    
            // overide 3rd table
            settable_result_object();
            settable_result_write();
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        // setting up project time
        if (!createproject[16].equals("Not set")){
        if (!createproject[17].equals("Not set")){
        projectime[0]=Integer.parseInt(createproject[16].substring(0,4));
        projectime[1]=Integer.parseInt(createproject[16].substring(5,7));
        projectime[2]=Integer.parseInt(createproject[17].substring(0,4));
        projectime[3]=Integer.parseInt(createproject[17].substring(5,7));                

//        // notify main control
//        maincontrol.append("setting up project time from: "
//                + projectime[0] + "/" + projectime[1] + " to "
//                + projectime[2] + "/" + projectime[3] +"\n");
        }
        }
}

public void octaverun(String function){
        try {
            String octrun = "octave-cli --eval ";
            String octfunction = " \""+function+"\" ";
            String octpath = " --path "+installdir+"src/octave_script " ;
            Runtime rt = Runtime.getRuntime();
            maincontrol.append(octrun + octfunction + octpath +"\n\n");
            Process pr = rt.exec(octrun + octfunction + octpath);

            BufferedReader input = new BufferedReader(new InputStreamReader(pr.getInputStream()));
            String line=null;
            while((line=input.readLine()) != null) {
                System.out.println(line);
                maincontrol.append(line+"\n");
            }

            int exitVal = pr.waitFor();
            System.out.println("Exited with error code "+exitVal);

        } catch(Exception e) {
            System.out.println(e.toString());
            e.printStackTrace();
        }
}

public String noextension(String file){
        // obtain projectname
        String project = file;
        int lastPeriodPos = project.lastIndexOf('.');
        if (lastPeriodPos > 0) {
            project = project.substring(0, lastPeriodPos);
        }
        return project;
}
        
// -------------------------------File filter-----------------------------------
    
    class MyCustomFilter extends javax.swing.filechooser.FileFilter {
        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with ".txt" extension
            return file.isDirectory() || file.getAbsolutePath().endsWith(".txt");
        }
        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            // hard-coded = ugly, should be done via I18N
            return "Text documents (*.txt)";
        }
    } 
    
    class NewFileFilter extends javax.swing.filechooser.FileFilter {
        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with .extension
            return file.isDirectory() || file.getAbsolutePath().endsWith(".mrc");
        }
        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            return "MRCP file (*.rcp)";
        }
    } 
    
    class ProjectFilter extends javax.swing.filechooser.FileFilter {
        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with .extension
            return file.isDirectory() || file.getAbsolutePath().endsWith(".awp");
        }
        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            return "AWGenSCP project (*.awp)";
        }
    } 
        
    class TextFilter extends javax.swing.filechooser.FileFilter {
        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with .extension
            return file.isDirectory() || file.getAbsolutePath().endsWith(".txt");
        }
        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            return ".txt file (*.txt)";
        }
    } 
    
    class csvFilter extends javax.swing.filechooser.FileFilter {
        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with .extension
            return file.isDirectory() || file.getAbsolutePath().endsWith(".csv");
        }
        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            return ".csv file (*.csv)";
        }
    } 
        
        
     class folderFilter extends javax.swing.filechooser.FileFilter {
        @Override
        public boolean accept(File file) {
            // Allow only directories, or files with .extension
            return file.isDirectory();
        }
        @Override
        public String getDescription() {
            // This description will be displayed in the dialog,
            return "APHRODITE folder";
        }
    } 

     public void createproject(){
        int returnVal = chooser_new.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
        File file = chooser_new.getSelectedFile();
        
        // check file extension
        String checked_file = checkExtension(file,"awp");
        
        // obtain projectname
        //String project=noextension(file);
        String project=new File(checked_file).getName();
        
        // set project name and directory
        projectname=project;
        projectdir=file.getParent()+"/";
        projectdir=projectdir.replace("\\","/");
        
        // create project
        SimpleDateFormat df = new SimpleDateFormat("yyMMddHHmmss");
        Timestamp timestamp = new Timestamp(System.currentTimeMillis());
        System.out.println("\n"+"timestamp:"+df.format(timestamp));
        projectid=df.format(timestamp);
        
        //create project
        new_createproject();
          
        // check if file exist
        int write=checkExist(new File(checked_file));

        // save new file
        if (write==0) {
          saveproject(checked_file);
          // notify command
          maincontrol.setText("new project created \n");
          maincontrol.append("name: "+projectname+"\n");
          maincontrol.append("directory: "+projectdir+"\n");
          projectsave=1;
        } else {
            overwrite_file=new File(checked_file);
            dialog_overwrite.setVisible(true);
            dialog_overwrite.setLocationRelativeTo(null);
        }
        }
}
        
// ----------------------------------------------------------------------------


    private void loadprojectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadprojectActionPerformed
        int returnVal = chooser_load.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
        File file = chooser_load.getSelectedFile();
        maincontrol.setText("load project: \n");
        maincontrol.append(file.getAbsolutePath());
        loadproject(file.getAbsolutePath());
        projectsave=1;
        }
    }//GEN-LAST:event_loadprojectActionPerformed

    private void newprojectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newprojectActionPerformed
        createproject();
    }//GEN-LAST:event_newprojectActionPerformed

    private void exitprojectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitprojectActionPerformed
         System.exit(0); 
    }//GEN-LAST:event_exitprojectActionPerformed

    private void setuprainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setuprainActionPerformed
        checkproject();
        dialog_setrain.setVisible(true);
        dialog_setrain.setLocationRelativeTo(null);
    }//GEN-LAST:event_setuprainActionPerformed

    private void close_aboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_close_aboutActionPerformed
        maincontrol.setText("Help windows closed");
        dialog_help.dispose();
    }//GEN-LAST:event_close_aboutActionPerformed

    private void helpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpActionPerformed
        dialog_help.setVisible(true);
        dialog_help.setLocationRelativeTo(null);
    }//GEN-LAST:event_helpActionPerformed

    private void tutorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tutorialActionPerformed
        String tutfile=new String();
        try {
            Desktop desktop = java.awt.Desktop.getDesktop();
            tutfile=installdir+"src/help.pdf";
            URI oURL = new URI(tutfile);
            desktop.browse(oURL);
            } catch (Exception e) {
            e.printStackTrace();
        }
        maincontrol.setText("Opening help file " + tutfile);
    }//GEN-LAST:event_tutorialActionPerformed

    private void cfsv2setupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cfsv2setupActionPerformed

        dialog_cfsv2.setVisible(true);
        dialog_cfsv2.setLocationRelativeTo(null);
    }//GEN-LAST:event_cfsv2setupActionPerformed

    private void cfsv2_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cfsv2_cancelActionPerformed
        dialog_cfsv2.dispose();
    }//GEN-LAST:event_cfsv2_cancelActionPerformed

    private void cfsv2_downloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cfsv2_downloadActionPerformed

        // define noaa directory
        String cfsdir="http://www.cpc.ncep.noaa.gov/products/CFSv2/";
        String cfssource=new String();

        // close dialog
        dialog_cfsv2.dispose();

        //obtain requested zone
        String ensind = (String)combo_cfsens.getSelectedItem();
        String ninozone = (String)combo_sstzone.getSelectedItem();
        maincontrol.setText("selecting zone: "+ninozone+", ensemble: "
                +ensind+"... \n \n");
        
        //selecting ensemble to download
        if (ensind.equals("Ensemble 1")) {
            cfsdir=cfsdir+"dataInd1/";
        } else if (ensind.equals("Ensemble 2")) {
            cfsdir=cfsdir+"dataInd2/";
        } else if (ninozone.equals("Ensemble 3")) {
            cfsdir=ensind+"dataInd3/";
        }

        //selecting SST zone to download
        if (ninozone.equals("Nino 1+2")) {
            cfssource=cfsdir+"nino12Mon.nc";
        } else if (ninozone.equals("Nino 3")) {
            cfssource=cfsdir+"nino3Mon.nc";
        } else if (ninozone.equals("Nino 3.4")) {
            cfssource=cfsdir+"nino34Mon.nc";
        } else if (ninozone.equals("Nino 4")) {
            cfssource=cfsdir+"nino4Mon.nc";
        }

        // download data
        String noaasave = projectdir+"get_cfs.nc";
        maincontrol.append("running CFSv2 extractor, now download file: \n");
        maincontrol.append(cfssource+"\n to "+noaasave+"\n \n");
        donwloadWeb(cfssource,noaasave);

        // structuring data
        maincontrol.append("download completed, now structuring data.. \n \n");
        cfs.run(projectdir,noaasave);
        maincontrol.append("Finished structuring data, check "+ projectdir +"cfs_ files \n");
        //String getoctaverun=("read_cfsv2('"+projectdir+"')");
        //octaverun(getoctaverun);

    }//GEN-LAST:event_cfsv2_downloadActionPerformed

    private void aphrosetupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aphrosetupActionPerformed
        checkproject();
        dialog_aphro.setVisible(true);
        dialog_aphro.setLocationRelativeTo(null);
    }//GEN-LAST:event_aphrosetupActionPerformed

    private void sstsetupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sstsetupActionPerformed
        checkproject();
        dialog_noaa.setVisible(true);
        dialog_noaa.setLocationRelativeTo(null);
    }//GEN-LAST:event_sstsetupActionPerformed

    private void adjusttemp_sourcefileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adjusttemp_sourcefileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_adjusttemp_sourcefileActionPerformed

    private void adjusttemp_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adjusttemp_cancelActionPerformed
        dialog_adjusttemp.dispose();
    }//GEN-LAST:event_adjusttemp_cancelActionPerformed

    private void adjusttemp_continueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adjusttemp_continueActionPerformed
        dialog_adjusttemp.dispose();
        maincontrol.setText("Ajdusting temperature, please wait");
    }//GEN-LAST:event_adjusttemp_continueActionPerformed

    private void adjusttemp_outbrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adjusttemp_outbrowseActionPerformed
        int returnVal = chooser_adjusttemp_outfile.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
        File file = chooser_adjusttemp_outfile.getSelectedFile();
        adjusttemp_outfile.setText(file.getAbsolutePath());
        }
    }//GEN-LAST:event_adjusttemp_outbrowseActionPerformed

    private void adjusttemp_sourcebrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adjusttemp_sourcebrowseActionPerformed
        int returnVal = chooser_adjusttemp_infile.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
        File file = chooser_adjusttemp_infile.getSelectedFile();
        // What to do with the file, e.g. display it in a TextArea
        adjusttemp_sourcefile.setText(file.getAbsolutePath());
        }
    }//GEN-LAST:event_adjusttemp_sourcebrowseActionPerformed

    private void combo_cfsensActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_cfsensActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_combo_cfsensActionPerformed

    private void simtime1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simtime1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_simtime1ActionPerformed

    private void setuptempActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setuptempActionPerformed
        checkproject();
        dialog_settemp.setVisible(true);
        dialog_settemp.setLocationRelativeTo(null);
    }//GEN-LAST:event_setuptempActionPerformed

    private void setuppredictorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setuppredictorActionPerformed
        checkproject();
        dialog_setpredict.setVisible(true);
        dialog_setpredict.setLocationRelativeTo(null);
    }//GEN-LAST:event_setuppredictorActionPerformed

    private void setrain_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setrain_cancelActionPerformed
        dialog_setrain.dispose();
    }//GEN-LAST:event_setrain_cancelActionPerformed

    private void setrain_continueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setrain_continueActionPerformed
        // close dialog
        dialog_setrain.dispose();
                
        // initiate variables
        int year=Integer.parseInt(setrain_time1.getText());
        int month=Integer.parseInt(setrain_time2.getText());
        int day=Integer.parseInt(setrain_time3.getText());
        String outfile="rain.awg";
        String datain=setrain_file.getText();
        
    // dispatching data
    class Loader {    
    SwingWorker createWorker() {
        return new SwingWorker<Boolean, Integer>() { 
            
        // backgound process     
        @Override
        protected Boolean doInBackground() throws Exception {
        // Background work
        publish(1);
        // run function
        awg.addtime_attrib_rain(datain,projectdir,projectid,outfile,year,month,day); 
        // Value transmitted to done()
        return true;
        }

        // main process
         @Override
         protected void process(List<Integer> chunks) {
         // Processing data
        maincontrol.setText("Setting up rainfall data, please wait \n");
        maincontrol.append("reading  "+setrain_file.getText()+ "\n");
        maincontrol.append("Initial time  "
                +Integer.parseInt(setrain_time1.getText())+ "/"
                +Integer.parseInt(setrain_time2.getText())+ "/"
                +Integer.parseInt(setrain_time3.getText())+"\n");
         }

         // finished process
         @Override
         protected void done() {
         // formating tableview
         createproject[3]=outfile;
         table_setupfile[1][1]=createproject[3];
         settable_setup_object();
         settable_setup_write();
         // Finish sequence
         System.out.println("Finished"); 
         maincontrol.append("finished reading file \n");
         }
  
        // terminate worker
        };
    }    
    }
    
    // run worker
    Loader test1=new Loader();
    SwingWorker work = test1.createWorker();
    work.execute();
    
    /* old function
        awg.addtime_attrib_rain(datain,projectdir,projectid,outfile,year,month,day); 
        
        // formating tableview
        createproject[3]=outfile;
        table_setupfile[1][1]=createproject[3];
        settable_setup_object();
        settable_setup_write();
        
        // notify end of process
        maincontrol.append("finished reading file");
    */
    }//GEN-LAST:event_setrain_continueActionPerformed

    private void settemp_continueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settemp_continueActionPerformed
        // close dialog
        dialog_settemp.dispose();
        
        // initiate variables
        int year=Integer.parseInt(settemp_time1.getText());
        int month=Integer.parseInt(settemp_time2.getText());
        int day=Integer.parseInt(settemp_time3.getText());
        String outfile="temp.awg";
        String datain=settemp_file.getText();
    
    // dispatching data
    class Loader {    
    SwingWorker createWorker() {
        return new SwingWorker<Boolean, Integer>() { 
            
        // backgound process     
        @Override
        protected Boolean doInBackground() throws Exception {
        // Background work
        publish(1);
        // run function
        awg.addtime_attrib_temp(datain,projectdir,projectid,outfile,year,month,day);  
        // Value transmitted to done()
        return true;
        }

        // main process
         @Override
         protected void process(List<Integer> chunks) {
         // Processing data
         maincontrol.setText("Setting up temperature data, please wait \n");
         maincontrol.append("reading  "+settemp_file.getText()+ "\n");
         maincontrol.append("Initial time  "
                +Integer.parseInt(settemp_time1.getText())+ "/"
                +Integer.parseInt(settemp_time2.getText())+ "/"
                +Integer.parseInt(settemp_time3.getText())+"\n");
         }

         // finished process
         @Override
         protected void done() {
         // formating tableview
         createproject[4]=outfile;
         table_setupfile[2][1]=createproject[4];
         settable_setup_object();
         settable_setup_write();
         // Finish sequence
         System.out.println("Finished"); 
         maincontrol.append("finished reading file \n");
         }
  
        // terminate worker
        };
    }    
    }
    
    // run worker
    Loader test1=new Loader();
    SwingWorker work = test1.createWorker();
    work.execute();
        
    /* old function
        
        // begin processing
        maincontrol.setText("Setting up temperature data, please wait \n");
        maincontrol.append("reading  "+settemp_file.getText()+ "\n");
        maincontrol.append("Initial time  "
                +Integer.parseInt(settemp_time1.getText())+ "/"
                +Integer.parseInt(settemp_time2.getText())+ "/"
                +Integer.parseInt(settemp_time3.getText())+"\n");
        
        // run function
        int year=Integer.parseInt(settemp_time1.getText());
        int month=Integer.parseInt(settemp_time2.getText());
        int day=Integer.parseInt(settemp_time3.getText());
        String outfile="temp.awg";
        String datain=settemp_file.getText();
        awg.addtime_attrib_temp(datain,projectdir,projectid,outfile,year,month,day); 
        
        
        // formating tableview
        createproject[4]=outfile;
        table_setupfile[2][1]=createproject[4];
        settable_setup_object();
        settable_setup_write();
        
        // notify end of process
        maincontrol.append("finished reading file");
        
    */
    }//GEN-LAST:event_settemp_continueActionPerformed

    private void settemp_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settemp_cancelActionPerformed
        dialog_settemp.dispose();
    }//GEN-LAST:event_settemp_cancelActionPerformed

    private void simtime_continueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simtime_continueActionPerformed
        dialog_modelbuild.dispose();
        maincontrol.setText("Setting up time for building model, please wait");
        
        // configuring project time
        projectime[0]=Integer.parseInt(simtime1.getText());
        projectime[1]=Integer.parseInt(simtime2.getText());
        projectime[2]=Integer.parseInt(simtime3.getText());
        projectime[3]=Integer.parseInt(simtime4.getText());
        
        // writing info to main windows
        DecimalFormat fmt = new DecimalFormat("00");
        table_configfile[1][1]=simtime1.getText()+"/"+fmt.format(projectime[1]);
        table_configfile[2][1]=simtime3.getText()+"/"+fmt.format(projectime[3]);
        createproject[16]=table_configfile[1][1];
        createproject[17]=table_configfile[2][1];
        
        // Notify windows
        maincontrol.setText("Model building set from: "+createproject[16]+" to "+createproject[17]);
        settable_config_object();
        settable_config_write();
    }//GEN-LAST:event_simtime_continueActionPerformed

    private void simtime_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simtime_cancelActionPerformed
        dialog_modelbuild.dispose();
    }//GEN-LAST:event_simtime_cancelActionPerformed

    private void chooser_loadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooser_loadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chooser_loadActionPerformed

    private void adjusttemp_initlevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adjusttemp_initlevActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_adjusttemp_initlevActionPerformed

    private void setrain_browsefileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setrain_browsefileActionPerformed
        int returnVal = chooser_setrain.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
        File file = chooser_setrain.getSelectedFile();
        // What to do with the file, e.g. display it in a TextArea
        setrain_file.setText(file.getAbsolutePath());
        }
    }//GEN-LAST:event_setrain_browsefileActionPerformed

    private void settemp_filebrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settemp_filebrowseActionPerformed
        int returnVal = chooser_settemp.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
        File file = chooser_settemp.getSelectedFile();
        // What to do with the file, e.g. display it in a TextArea
        settemp_file.setText(file.getAbsolutePath());
        }
    }//GEN-LAST:event_settemp_filebrowseActionPerformed

    private void getrain_monthensActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getrain_monthensActionPerformed
        // check project
        checkproject();

        // notify progress
        maincontrol.setText("Calculating monthly ensemble, please wait... \n");

        // define input output file
        String input="rain_sim.awg";
        String output="rain_monthsim.awg";

        // begin processing
        awg.getrain_month(input,projectdir,projectid);
        
        /*
        checkproject();
        maincontrol.setText("Calculating ensemble monthly rainfall, please wait \n");
        String tryoctaverun=("getrain_month('"+ 
        projectdir+noextension(projectname)+"')");
        maincontrol.append(tryoctaverun+"\n");
        octaverun(tryoctaverun);
        */
        
        // formating tableview
        createproject[27]=output;
        table_finalfile[6][1]=createproject[27];
        settable_result_object();
        settable_result_write();
        
        // notify progress
        maincontrol.append("Monthly ensemble calculation completed \n");
    }//GEN-LAST:event_getrain_monthensActionPerformed

    private void gettemp_monthensActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gettemp_monthensActionPerformed
        // check project
        checkproject();
        
        // notify progress
        maincontrol.setText("Calculating monthly ensemble, please wait... \n");
        
        // define input output file
        String input="temp_sim.awg";
        String output="temp_monthsim.awg";

        // begin processing
        awg.gettemp_month(input,projectdir,projectid);
        
        /* 
        // begin processing
        checkproject();
        maincontrol.setText("Calculating ensemble monthly rainfall, please wait \n");
        String tryoctaverun=("gettemp_month('"+ 
        projectdir+noextension(projectname)+"')");
        maincontrol.append(tryoctaverun+"\n");
        octaverun(tryoctaverun);
        */
        
        // formating tableview
        createproject[28]=output;
        table_finalfile[7][1]=createproject[28];
        settable_result_object();
        settable_result_write();
        
        // notify progress
        maincontrol.append("Monthly ensemble calculation completed \n");
    }//GEN-LAST:event_gettemp_monthensActionPerformed

    private void table_projectviewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_projectviewMouseClicked
        int row = table_projectview.rowAtPoint(evt.getPoint());
        int col = table_projectview.columnAtPoint(evt.getPoint());
        //maincontrol.setText("click row " + Integer.toString(row) + " col " + Integer.toString(col));
        String value = String.valueOf(table_projectview.getModel().getValueAt(row, col));
        //maincontrol.append("\n" + value);
        
        // begin show table
        if ((col == 1) && (!value.equals("Not set"))) {
        if (!value.equals("")) {
            // define fullpath
            String fullpath=projectdir+projectid+"_"+createproject[row+2];
            //maincontrol.setText(fullpath);
            
            // show table
            show_table(fullpath);
        }    
        } else {
         //maincontrol.append("\n Variable not set");
        }
    }//GEN-LAST:event_table_projectviewMouseClicked

    private void table_resultviewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_resultviewMouseClicked
        int row = table_resultview.rowAtPoint(evt.getPoint());
        int col = table_resultview.columnAtPoint(evt.getPoint());
        //maincontrol.setText("click row " + Integer.toString(row) + " col " + Integer.toString(col)+ "\n");
        String value = String.valueOf(table_resultview.getModel().getValueAt(row, col));
        //maincontrol.append("value"+value + "\n");
        
        // begin show table
        if ((col == 1) && (!value.equals("Not set"))) {
        if (!value.equals("")) {
            
            // define fullpath
            String fullpath=projectdir+projectid+"_"+createproject[row+21];
            System.out.println("fullpath"+fullpath);
            
            // show table
            show_table(fullpath);
            
        }
        } else {
         System.out.println("\n Variable not set");
        }
    }//GEN-LAST:event_table_resultviewMouseClicked

    private void table_simviewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_simviewMouseClicked
        int row = table_simview.rowAtPoint(evt.getPoint());
        int col = table_simview.columnAtPoint(evt.getPoint());
        //maincontrol.setText("click row " + Integer.toString(row) + " col " + Integer.toString(col));
        String value = String.valueOf(table_simview.getModel().getValueAt(row, col));
        //maincontrol.append("\n" + value);
    }//GEN-LAST:event_table_simviewMouseClicked

    private void getrain_meanensActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getrain_meanensActionPerformed
            
    checkproject();
    
    // dispatching data
    class Loader {    
    SwingWorker createWorker() {
        return new SwingWorker<Boolean, Integer>() { 
            
        // backgound process     
        @Override
        protected Boolean doInBackground() throws Exception {
        // Background work
        publish(1);
        // define variable
        String input1="rain_regress.awg";
        String input2="predict_future.awg";
        // run function
        awg.simulate_rain_meanens(input1,input2,projectdir,projectid,seasonal);
        // Value transmitted to done()
        return true;
        }

        // main process
         @Override
         protected void process(List<Integer> chunks) {
         // Processing data
         maincontrol.setText("Starting rain mean ensemble simulation, please wait \n");
         System.out.println("chunk:"+chunks);
         }

         // finished process
         @Override
         protected void done() {
         // formating tableview
        createproject[24]="rain_sim_meanens.awg";
        table_finalfile[3][1]=createproject[24];
        settable_result_object();
        settable_result_write();
         // Finish sequence
         System.out.println("Finished"); 
         maincontrol.append("Rain  mean ensemble simulation finished \n");
         }
  
        // terminate worker
        };
    }    
    }
    
    // run worker
    Loader test1=new Loader();
    SwingWorker work = test1.createWorker();
    work.execute();

        
    /*    // begin processing
        checkproject();
        maincontrol.setText("Simulating rain ensemble mean, please wait \n");
        String tryoctaverun=("simulate_rain_meanens('"+ 
        projectdir+noextension(projectname)+"',"+ seasonal+")");
        maincontrol.append(tryoctaverun+"\n");
        octaverun(tryoctaverun);
        
        // formating tableview
        createproject[24]="rain_sim_meanens.awg";
        table_finalfile[3][1]=createproject[24];
        settable_result_object();
        settable_result_write();
    */
        
    }//GEN-LAST:event_getrain_meanensActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
    
    // get installation directory    
    try{
      String executionPath = System.getProperty("user.dir");
      System.out.print("Executing at =>"+executionPath.replace("\\", "/"));
      installdir=executionPath.replace("\\", "/")+"/";
      //maincontrol.setText("Initiating program at =>"+installdir.replace("\\", "/"));
    }catch (Exception e){
      System.out.println("Exception caught ="+e.getMessage());
    }
    
    // overide 1st table
    settable_setupfile_default();
    settable_setup_object();
    settable_setup_write();
    
    // overide 2nd table
    settable_configfile_default();
    settable_config_object();
    settable_config_write();
    
     // overide 3rd table
    settable_resultfile_default();
    settable_result_object();
    settable_result_write();
    }//GEN-LAST:event_formWindowOpened

    private void getrain_monthensmeanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getrain_monthensmeanActionPerformed
        // check project
        checkproject();
        
        // notify progress
        maincontrol.setText("Calculating monthly ensemble, please wait... \n");

        // define input output file
        String input="rain_sim_meanens.awg";
        String output="rain_monthsim_meanens.awg";

        // begin processing
        awg.getrain_monthmean(input,projectdir,projectid);

/*
        // begin processing
        checkproject();
        maincontrol.setText("Calculating mean ensemble monthly rainfall, please wait \n");
        String tryoctaverun=("getrain_monthmean('"+ 
        projectdir+noextension(projectname)+"')");
        maincontrol.append(tryoctaverun+"\n");
        octaverun(tryoctaverun);
*/

        // formating tableview
        createproject[29]=output;
        table_finalfile[8][1]=createproject[29];
        settable_result_object();
        settable_result_write();
        
        // notify progress
        maincontrol.append("Monthly ensemble calculation completed \n");
    }//GEN-LAST:event_getrain_monthensmeanActionPerformed

    private void gettemp_monthensmeanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gettemp_monthensmeanActionPerformed
        // check project
        checkproject();
        
        // define input output file
        String input="temp_sim_meanens.awg";
        String output="temp_monthsim_meanens.awg";
        
        // notify progress
        maincontrol.setText("Calculating monthly ensemble, please wait... \n");

        // begin processing
        awg.gettemp_monthmean(input,projectdir,projectid);
        
        /* 
        // begin processing
        checkproject();
        maincontrol.setText("Calculating mean ensemble monthly temperature, please wait \n");
        String tryoctaverun=("gettemp_monthmean('"+ 
        projectdir+noextension(projectname)+"')");
        maincontrol.append(tryoctaverun+"\n");
        octaverun(tryoctaverun);
        */
        
        // formating tableview
        createproject[30]=output;
        table_finalfile[9][1]=createproject[30];
        settable_result_object();
        settable_result_write();
        
        // notify progress
        maincontrol.append("Monthly ensemble calculation completed \n");
    }//GEN-LAST:event_gettemp_monthensmeanActionPerformed

    private void exportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportActionPerformed
        int returnVal = chooser_export.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
        File file = chooser_export.getSelectedFile();
        String file_export=file.getAbsolutePath();
        
        // check file extension
        String checked_file = checkExtension(file,"csv");
        
        // check if file exist
        file = new File(checked_file);
        int write=checkExist(file);

        // save new file
        if (write==0) {
            savetable(checked_file);
            maincontrol.setText("exported to "+checked_file); 
        } else {
            overwrite_file=new File(checked_file);
            dialog_overwrite.setVisible(true);
            dialog_overwrite.setLocationRelativeTo(null);
        }
      
        }
    }//GEN-LAST:event_exportActionPerformed

    private void saveprojectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveprojectActionPerformed
        if (projectsave==1){
            String checked_file=projectdir+ projectname;
            saveproject(checked_file);
            maincontrol.setText("Project saved to: "+checked_file);
            projectsave=1;
        } else if (projectsave==0){
        
            // create new project
            int returnVal = chooser_new.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = chooser_new.getSelectedFile();

            // check file extension
            String checked_file = checkExtension(file,"awp");

            // obtain projectname
            //String project=noextension(file);
            String project=new File(checked_file).getName();

            // set project name and directory
            projectname=project;
            projectdir=file.getParent()+"/";
             projectdir=projectdir.replace("\\","/");

             // check if file exist
             int write=checkExist(new File(checked_file));

             // save new file
             if (write==0) {
               saveproject(checked_file);
               // notify command
               maincontrol.setText("new project created \n");
               maincontrol.append("name: "+projectname+"\n");
               maincontrol.append("directory: "+projectdir+"\n");
               projectsave=1;
             } else {
                 overwrite_file=new File(checked_file);
                 dialog_overwrite.setVisible(true);
                 dialog_overwrite.setLocationRelativeTo(null);
             }
             }
        }
        
// show dialog
//        if (projectname.equals("Not set")){
//        final JFrame kid = new JFrame();
//        JOptionPane.showMessageDialog(kid,"Save failed, please create new project.");
//        } else {
//        String checked_file=projectdir+ projectname;
//        saveproject(checked_file);
//        maincontrol.setText("Project saved to: "+checked_file);
    }//GEN-LAST:event_saveprojectActionPerformed

    private void button_overwriteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_overwriteActionPerformed
        savetable(overwrite_file.getAbsolutePath());
        maincontrol.setText("overwrite file "+overwrite_file.getAbsolutePath());
        projectsave=1;
        dialog_overwrite.dispose();
    }//GEN-LAST:event_button_overwriteActionPerformed

    private void button_nowriteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_nowriteActionPerformed
        dialog_overwrite.dispose();
        maincontrol.setText("export canceled"); 
    }//GEN-LAST:event_button_nowriteActionPerformed

    private void aphrodirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aphrodirActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_aphrodirActionPerformed

    private void aphro_extractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aphro_extractActionPerformed
        dialog_aphro.dispose();
        maincontrol.setText("running APHRODITE extractor, please wait... \n\n");
        try {
            TimeUnit.SECONDS.sleep(5);
        } catch (InterruptedException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
        }
        // loop to each year
        for (int i=Integer.parseInt(time_aphro1.getText());i<=Integer.parseInt(time_aphro2.getText());i++){
        octaverun("aphro_reader('"+aphrodir.getText().replace("\\","/")+"/','"
                                 +projectdir+"','"
                                 +"aphro_extract.txt"+"',"
                                 +time_aphro1.getText()+","
                                 +Integer.toString(i)+","
                                 +coord_aphro1.getText()+","
                                 +coord_aphro2.getText()+")");
        }
    }//GEN-LAST:event_aphro_extractActionPerformed

    private void aphro_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aphro_cancelActionPerformed
        dialog_aphro.dispose();
    }//GEN-LAST:event_aphro_cancelActionPerformed

    private void time_aphro2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_time_aphro2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_time_aphro2ActionPerformed

    private void time_aphro1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_time_aphro1MouseExited
        String inputok = "1961";
        String input = time_aphro1.getText();
        try {
            int output = Integer.parseInt(input);
            inputok = Integer.toString(output);
            time_aphro1.setText(inputok);
        } catch (Exception e){
            System.out.println("Exception caught ="+e.getMessage());
            time_aphro1.setText(inputok);
        }
    }//GEN-LAST:event_time_aphro1MouseExited

    private void coord_aphro2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coord_aphro2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_coord_aphro2ActionPerformed

    private void coord_aphro1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coord_aphro1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_coord_aphro1ActionPerformed

    private void closeprojectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeprojectActionPerformed
    // restart project save
    projectsave=0;
        
    // overide 1st table
    settable_setupfile_default();
    settable_setup_object();
    settable_setup_write();
    
    // overide 2nd table
    settable_configfile_default();
    settable_config_object();
    settable_config_write();
    
     // overide 3rd table
    settable_resultfile_default();
    settable_result_object();
    settable_result_write();
    
    // refresh main table
    main_table.setModel(new javax.swing.table.DefaultTableModel(
    new Object [][] {
    },
    new String [] {
    }
    ));
    
    // refresh command windows
    maincontrol.setText("");
    }//GEN-LAST:event_closeprojectActionPerformed

    private void fileoptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileoptionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileoptionActionPerformed

    private void saveasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveasActionPerformed

        // create new project
            int returnVal = chooser_new.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = chooser_new.getSelectedFile();

            // check file extension
            String checked_file = checkExtension(file,"awp");

            // obtain projectname
            //String project=noextension(file);
            String project=new File(checked_file).getName();

            // set project name and directory
            projectname=project;
            projectdir=file.getParent()+"/";
            projectdir=projectdir.replace("\\","/");

            // check if file exist
            int write=checkExist(new File(checked_file));

            // save new file
            if (write==0) {
               saveproject(checked_file);
               // notify command
               maincontrol.setText("new project created \n");
               maincontrol.append("name: "+projectname+"\n");
               maincontrol.append("directory: "+projectdir+"\n");
               projectsave=1;
            } else {
                 overwrite_file=new File(checked_file);
                 dialog_overwrite.setVisible(true);
                 dialog_overwrite.setLocationRelativeTo(null);
            }
            }
    }//GEN-LAST:event_saveasActionPerformed

    private void setpredict_continueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setpredict_continueActionPerformed
        // close dialog
        dialog_setpredict.dispose();
        
        // initiate variables
        int year=Integer.parseInt(setpredict_time1.getText());
        int month=Integer.parseInt(setpredict_time2.getText());
        String outfile="predict_now.awg";
        String datain=setpredict_file.getText();
      
    // dispatching data
    class Loader {    
    SwingWorker createWorker() {
        return new SwingWorker<Boolean, Integer>() { 
            
        // backgound process     
        @Override
        protected Boolean doInBackground() throws Exception {
        // Background work
        publish(1);
        // run function
        awg.addtime_attrib_predictnow(datain,projectdir,projectid,outfile,year,month);  
        // Value transmitted to done()
        return true;
        }

        // main process
         @Override
         protected void process(List<Integer> chunks) {
         // Processing data
         maincontrol.setText("Setting up predictor data, please wait \n");
         maincontrol.append("reading  "+setpredict_file.getText()+ "\n");
         maincontrol.append("Initial time  "
                +Integer.parseInt(setpredict_time1.getText())+ "/"
                +Integer.parseInt(setpredict_time2.getText())+ "\n");
         }

         // finished process
         @Override
         protected void done() {
         // formating tableview
         createproject[5]="predict_now.awg";
         table_setupfile[3][1]=createproject[5];
         settable_setup_object();
         settable_setup_write();
         // Finish sequence
         System.out.println("Finished"); 
         maincontrol.append("finished reading file \n");
         }
  
        // terminate worker
        };
    }    
    }
    
    // run worker
    Loader test1=new Loader();
    SwingWorker work = test1.createWorker();
    work.execute();
        
    /* old function
        
        // begin processing
        maincontrol.setText("Setting up predictor data, please wait \n");
        maincontrol.append("reading  "+setpredict_file.getText()+ "\n");
        maincontrol.append("Initial time  "
                +Integer.parseInt(setpredict_time1.getText())+ "/"
                +Integer.parseInt(setpredict_time2.getText())+ "\n");
        
        // run function
        int year=Integer.parseInt(setpredict_time1.getText());
        int month=Integer.parseInt(setpredict_time2.getText());
        String outfile="predict_now.awg";
        String datain=setpredict_file.getText();
        awg.addtime_attrib_predictnow(datain,projectdir,projectid,outfile,year,month); 
        
        // formating tableview
        createproject[5]="predict_now.awg";
        table_setupfile[3][1]=createproject[5];
        settable_setup_object();
        settable_setup_write();
        
        // end function
        maincontrol.append("finished reading file " + "\n");
    */              
    }//GEN-LAST:event_setpredict_continueActionPerformed

    private void setpredict_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setpredict_cancelActionPerformed
        dialog_setpredict.dispose();
    }//GEN-LAST:event_setpredict_cancelActionPerformed

    private void setpredict_browsefileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setpredict_browsefileActionPerformed
        int returnVal = chooser_setpredict.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = chooser_setpredict.getSelectedFile();
            // What to do with the file, e.g. display it in a TextArea
            setpredict_file.setText(file.getAbsolutePath());
        }
    }//GEN-LAST:event_setpredict_browsefileActionPerformed

    private void setpredict_browsefile1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setpredict_browsefile1ActionPerformed
        int returnVal = chooser_setfuture.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = chooser_setfuture.getSelectedFile();
            // What to do with the file, e.g. display it in a TextArea
            setfuture_file.setText(file.getAbsolutePath());
        }
    }//GEN-LAST:event_setpredict_browsefile1ActionPerformed

    private void setfuture_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setfuture_cancelActionPerformed
        dialog_setfuture.dispose();
    }//GEN-LAST:event_setfuture_cancelActionPerformed

    private void setfuture_continueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setfuture_continueActionPerformed
        // close dialog
        dialog_setfuture.dispose();
        
        // initiate variables
        int year=Integer.parseInt(setfuture_time1.getText());
        int month=Integer.parseInt(setfuture_time2.getText());
        String outfile="predict_future.awg";
        String datain=setfuture_file.getText();
        
    // dispatching data
    class Loader {    
    SwingWorker createWorker() {
        return new SwingWorker<Boolean, Integer>() { 
            
        // backgound process     
        @Override
        protected Boolean doInBackground() throws Exception {
        // Background work
        publish(1);
        // run function
        awg.addtime_attrib_predictfuture(datain,projectdir,projectid,outfile,year,month); 
        // Value transmitted to done()
        return true;
        }

        // main process
         @Override
         protected void process(List<Integer> chunks) {
         // Processing data
         maincontrol.setText("Setting up projected data for simulation, please wait \n");
         maincontrol.append("reading  "+setfuture_file.getText()+ "\n");
         maincontrol.append("Initial time  "
                +Integer.parseInt(setfuture_time1.getText())+ "/"
                +Integer.parseInt(setfuture_time2.getText())+ "\n");
         }

         // finished process
         @Override
         protected void done() {
         // formating tableview
        createproject[6]=outfile;
        table_setupfile[4][1]=createproject[6];
        settable_setup_object();
        settable_setup_write();
        // formatting simtable
        String fullpath=projectdir+projectid+ "_" +outfile;
        getstartend(fullpath);
         // Finish sequence
         System.out.println("Finished"); 
         maincontrol.append("\n"+"finished reading file \n");
         }
  
        // terminate worker
        };
    }    
    }
    
    // run worker
    Loader test1=new Loader();
    SwingWorker work = test1.createWorker();
    work.execute();
        
    /* old function  
        // begin processing
        maincontrol.setText("Setting up projected data for simulation, please wait \n");
        maincontrol.append("reading  "+setfuture_file.getText()+ "\n");
        maincontrol.append("Initial time  "
                +Integer.parseInt(setfuture_time1.getText())+ "/"
                +Integer.parseInt(setfuture_time2.getText())+ "\n");
        
        // run function
        int year=Integer.parseInt(setfuture_time1.getText());
        int month=Integer.parseInt(setfuture_time2.getText());
        String outfile="predict_future.awg";
        String datain=setfuture_file.getText();
        awg.addtime_attrib_predictfuture(datain,projectdir,projectid,outfile,year,month); 
        
        // formating tableview
        createproject[6]=outfile;
        table_setupfile[4][1]=createproject[6];
        settable_setup_object();
        settable_setup_write();
        
        // formatting simtable
        String fullpath=projectdir+projectid+ "_" +outfile;
        getstartend(fullpath);
        
        // terminate function
        maincontrol.append("\n"+"finished reading file" + "\n");
    */    
    }//GEN-LAST:event_setfuture_continueActionPerformed

    private void setupsimulationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setupsimulationActionPerformed
        checkproject();
        dialog_setfuture.setVisible(true);
        dialog_setfuture.setLocationRelativeTo(null);
    }//GEN-LAST:event_setupsimulationActionPerformed

    private void rainsetupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rainsetupActionPerformed
        // begin processing
        checkproject();
        
        // initiate variables
        String input="rain.awg";
        String output="rain_param.awg";
        int yearstart=projectime[0];
        int monthstart=projectime[1];
        int yearend=projectime[2];
        int monthend=projectime[3];
        
    // dispatching data
    class Loader {    
    SwingWorker createWorker() {
        return new SwingWorker<Boolean, Integer>() { 
            
        // backgound process     
        @Override
        protected Boolean doInBackground() throws Exception {
        // Background work
        publish(1);
        // run function
        awg.getrain_param(input,projectdir,projectid,yearstart,monthstart,yearend,monthend);
        // Value transmitted to done()
        return true;
        }

        // main process
         @Override
         protected void process(List<Integer> chunks) {
         // Processing data
         maincontrol.setText("Setting up rain model, please wait... \n");
         }

         // finished process
         @Override
         protected void done() {
         // formating tableview
         createproject[8]=output;
         table_setupfile[6][1]=createproject[8];
         settable_setup_object();
         settable_setup_write();
         // Finish sequence
         System.out.println("Finished"); 
         maincontrol.append("\n"+"Finished setting up rain model  \n");
         }
  
        // terminate worker
        };
    }    
    }
    
    // run worker
    Loader test1=new Loader();
    SwingWorker work = test1.createWorker();
    work.execute();
        
    /* old function
        maincontrol.setText("Setting up rain model, please wait... \n");
        
        String tryoctaverun=("getrain_param('"+ 
        projectdir+noextension(projectname)+"rain.awg"+"',"+
                projectime[0]+","+projectime[1]+","+
                projectime[2]+","+projectime[3]+")"
                ); 
        maincontrol.append(tryoctaverun+"\n");
        octaverun(tryoctaverun);
        
        // run function
        String input="rain.awg";
        String output="rain_param.awg";
        int yearstart=projectime[0];
        int monthstart=projectime[1];
        int yearend=projectime[2];
        int monthend=projectime[3];
        awg.getrain_param(input,projectdir,projectid,yearstart,monthstart,yearend,monthend);
        
        // formating tableview
        createproject[8]=output;
        table_setupfile[6][1]=createproject[8];
        settable_setup_object();
        settable_setup_write();
        
        // notify end function
        maincontrol.append("Finished setting up rain model \n");
    */
    }//GEN-LAST:event_rainsetupActionPerformed

    private void simtime3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simtime3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_simtime3ActionPerformed

    private void modelbuildActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modelbuildActionPerformed
        checkproject();
        dialog_modelbuild.setVisible(true);
        dialog_modelbuild.setLocationRelativeTo(null);
    }//GEN-LAST:event_modelbuildActionPerformed

    private void tempsetupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tempsetupActionPerformed
        // begin processing
        checkproject();
        
        // initiate variables
        String input="temp.awg";
        String output="temp_param.awg";
        int yearstart=projectime[0];
        int monthstart=projectime[1];
        int yearend=projectime[2];
        int monthend=projectime[3];
      
    // dispatching data
    class Loader {    
    SwingWorker createWorker() {
        return new SwingWorker<Boolean, Integer>() { 
            
        // backgound process     
        @Override
        protected Boolean doInBackground() throws Exception {
        // Background work
        publish(1);
        // run function
        awg.gettemp_param(input,projectdir,projectid,yearstart,monthstart,yearend,monthend);
        // Value transmitted to done()
        return true;
        }

        // main process
         @Override
         protected void process(List<Integer> chunks) {
         // Processing data
         maincontrol.setText("Setting up temperature model, please wait... \n");
         }

         // finished process
         @Override
         protected void done() {
         // formating tableview
         createproject[11]=output;
         table_setupfile[9][1]=createproject[11];
         settable_setup_object();
         settable_setup_write();
         // Finish sequence
         System.out.println("Finished"); 
         maincontrol.append("Finished setting up temperature model \n");
         }
  
        // terminate worker
        };
    }    
    }
    
    // run worker
    Loader test1=new Loader();
    SwingWorker work = test1.createWorker();
    work.execute();    
        
    /* old function
        maincontrol.setText("Setting up temperature model, please wait \n");
        
        
        String tryoctaverun=("gettemp_param('"+ 
        projectdir+noextension(projectname)+"temp.awg"+"',"+
                projectime[0]+","+projectime[1]+","+
                projectime[2]+","+projectime[3]+")"
                ); 
        maincontrol.append(tryoctaverun+"\n");
        octaverun(tryoctaverun);
                
        // run function
        String input="temp.awg";
        String output="temp_param.awg";
        int yearstart=projectime[0];
        int monthstart=projectime[1];
        int yearend=projectime[2];
        int monthend=projectime[3];
        awg.gettemp_param(input,projectdir,projectid,yearstart,monthstart,yearend,monthend);
        
        // formating tableview
        createproject[11]=output;
        table_setupfile[9][1]=createproject[11];
        settable_setup_object();
        settable_setup_write();
        
        // notify end function
        maincontrol.append("Finished setting up rain model \n");
    */
    }//GEN-LAST:event_tempsetupActionPerformed

    private void predictor_formatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_predictor_formatActionPerformed
        // begin processing
        checkproject();
    
        // initiate variables
        String input="predict_now.awg";
        String output="predictnow_param.awg";
        
        
    // dispatching data
    class Loader {    
    SwingWorker createWorker() {
        return new SwingWorker<Boolean, Integer>() { 
            
        // backgound process     
        @Override
        protected Boolean doInBackground() throws Exception {
        
        // Background work
        publish(1);
        
        // run function
        int result=awg.predictnow_format(input,projectdir,projectid,projectime[0],projectime[1],projectime[2],projectime[3]);  
        System.out.println(result+" result");
        // Value transmitted to done()
        return true;
        }

        // main process
         @Override
         protected void process(List<Integer> chunks) {
         // Processing data
         maincontrol.setText("Structuring predictor data, please wait... \n");
         }

         // finished process
         @Override
         protected void done() {
         // formating tableview
         createproject[14]=output;
         table_setupfile[12][1]=createproject[14];
         settable_setup_object();
         settable_setup_write();
         // Finish sequence
         maincontrol.append("\n"+"Finished structuring predictor data \n");
         }
  
        // terminate worker
        };
    }    
    }
    
    // run worker
    Loader test1=new Loader();
    SwingWorker work = test1.createWorker();
    work.execute();
    
        
    /* old function
        maincontrol.setText("Structuring predictor data, please wait \n");
        
        String tryoctaverun=("predictnow_format('"+ 
        projectdir+noextension(projectname)+"predict_now.awg"+"',"+
                projectime[0]+","+projectime[1]+","+
                projectime[2]+","+projectime[3]+")"
                ); 
        maincontrol.append(tryoctaverun+"\n");
        octaverun(tryoctaverun);
        
        
        // running function
        String input="predict_now.awg";
        String output="predictnow_param.awg";
        awg.predictnow_format(input,projectdir,projectid,projectime[0],projectime[1],projectime[2],projectime[3]);      
        
        // formating tableview
        createproject[14]=output;
        table_setupfile[12][1]=createproject[14];
        settable_setup_object();
        settable_setup_write();
        
        // notify end function 
        maincontrol.append("Finished structuring predictor data \n");
    */
    }//GEN-LAST:event_predictor_formatActionPerformed

    private void rainregressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rainregressActionPerformed
        // begin processing
        checkproject();
    
        // initiate variables
        String input1="rain_param.awg";
        String input2="predictnow_param.awg";
        String output="rain_regress.awg";
        
    // dispatching data
    class Loader {    
    SwingWorker createWorker() {
        return new SwingWorker<Boolean, Integer>() { 
            
        // backgound process     
        @Override
        protected Boolean doInBackground() throws Exception {
        // Background work
        publish(1);
        // run function
        awg.build_rainmodel(input1,input2,projectdir,projectid,seasonal);
        // Value transmitted to done()
        return true;
        }

        // main process
         @Override
         protected void process(List<Integer> chunks) {
         // Processing data
         maincontrol.setText("Generating regression model, please wait... \n");
         }

         // finished process
         @Override
         protected void done() {
         // formating tableview
        createproject[9]=output;
        table_setupfile[7][1]=createproject[9];
        settable_setup_object();
        settable_setup_write();
         // Finish sequence
         System.out.println("Finished"); 
         maincontrol.append("Finished generating regression model \n");
         }
  
        // terminate worker
        };
    }    
    }
    
    // run worker
    Loader test1=new Loader();
    SwingWorker work = test1.createWorker();
    work.execute();    
        
    /* old function
        maincontrol.setText("Generating regression model, please wait \n");
        
        String tryoctaverun=("build_rainmodel('"+ 
        projectdir+noextension(projectname)+"',"+ seasonal+")");
        maincontrol.append(tryoctaverun+"\n");
        octaverun(tryoctaverun);
        
        // run function
        String input1="rain_param.awg";
        String input2="predictnow_param.awg";
        String output="rain_regress.awg";
        awg.build_rainmodel(input1,input2,projectdir,projectid,seasonal);
        
        // formating tableview
        createproject[9]=output;
        table_setupfile[7][1]=createproject[9];
        settable_setup_object();
        settable_setup_write();
        
        // notify end function
        maincontrol.append("Finished generating regression model \n");
    */
        
    }//GEN-LAST:event_rainregressActionPerformed

    private void tempregressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tempregressActionPerformed
        // begin processing
        checkproject();
    
        // initiate variables
        String input1="temp_param.awg";
        String input2="predictnow_param.awg";
        String output="temp_regress.awg";
        
    // dispatching data
    class Loader {    
    SwingWorker createWorker() {
        return new SwingWorker<Boolean, Integer>() { 
            
        // backgound process     
        @Override
        protected Boolean doInBackground() throws Exception {
        // Background work
        publish(1);
        // run function
        awg.build_tempmodel(input1,input2,projectdir,projectid,seasonal);
        // Value transmitted to done()
        return true;
        }

        // main process
         @Override
         protected void process(List<Integer> chunks) {
         // Processing data
         maincontrol.setText("Generating regression model, please wait... \n");
         }

         // finished process
         @Override
         protected void done() {
         // formating tableview
         createproject[12]=output;
         table_setupfile[10][1]=createproject[12];
         settable_setup_object();
         settable_setup_write();
         // Finish sequence
         System.out.println("Finished"); 
         maincontrol.append("Finished generating regression model \n");
         }
  
        // terminate worker
        };
    }    
    }
    
    // run worker
    Loader test1=new Loader();
    SwingWorker work = test1.createWorker();
    work.execute();    
    
    /* old function
        maincontrol.setText("Generating regression model, please wait \n");
        
        String tryoctaverun=("build_tempmodel('"+ 
        projectdir+noextension(projectname)+"',"+ seasonal+")");
        maincontrol.append(tryoctaverun+"\n");
        octaverun(tryoctaverun);
        
        // run function
        String input1="temp_param.awg";
        String input2="predictnow_param.awg";
        String output="temp_regress.awg";
        awg.build_tempmodel(input1,input2,projectdir,projectid,seasonal);
        
        // formating tableview
        createproject[12]=output;
        table_setupfile[10][1]=createproject[12];
        settable_setup_object();
        settable_setup_write();
        
        // notify end function
        maincontrol.append("Finished generating regression model \n");
    */
        
    }//GEN-LAST:event_tempregressActionPerformed

    private void run_rainActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_run_rainActionPerformed
        
    checkproject();
    
    // dispatching data
    class Loader {    
    SwingWorker createWorker() {
        return new SwingWorker<Boolean, Integer>() { 
            
        // backgound process     
        @Override
        protected Boolean doInBackground() throws Exception {
        // Background work
        publish(1);
        // define variable
        String input1="rain_regress.awg";
        String input2="predict_future.awg";
        // run function
        awg.simulate_rain(input1,input2,projectdir,projectid,seasonal);
        // Value transmitted to done()
        return true;
        }

        // main process
         @Override
         protected void process(List<Integer> chunks) {
         // Processing data
         maincontrol.setText("Starting rain simulation, please wait \n");
         System.out.println("chunk:"+chunks);
         }

         // finished process
         @Override
         protected void done() {
         // formating tableview
         createproject[22]="rain_sim.awg";
         table_finalfile[1][1]=createproject[22];
         settable_result_object();
         settable_result_write();
         // Finish sequence
         System.out.println("Finished"); 
         maincontrol.append("Rain simulation finished \n");
         }
  
        // terminate worker
        };
    }    
    }
    
    // run worker
    Loader test1=new Loader();
    SwingWorker work = test1.createWorker();
    work.execute();

/* old function

        // begin processing
        
        maincontrol.setText("Starting rain simulation, please wait \n");
        
       
        String tryoctaverun=("simulate_rain('"+ 
        projectdir+noextension(projectname)+"',"+ seasonal+")");
        maincontrol.append(tryoctaverun+"\n");
        octaverun(tryoctaverun);
        
        
        // formating tableview
        createproject[22]="rain_sim.awg";
        table_finalfile[1][1]=createproject[22];
        settable_result_object();
        settable_result_write();
        
*/
    }//GEN-LAST:event_run_rainActionPerformed

    private void run_tempActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_run_tempActionPerformed
        
    checkproject();
    
    // dispatching data
    class Loader {    
    SwingWorker createWorker() {
        return new SwingWorker<Boolean, Integer>() { 
            
        // backgound process     
        @Override
        protected Boolean doInBackground() throws Exception {
        // Background work
        publish(1);
        // define variable
        String input1="temp_regress.awg";
        String input2="predict_future.awg";
        // run function
        awg.simulate_temp(input1,input2,projectdir,projectid,seasonal);
        // Value transmitted to done()
        return true;
        }

        // main process
         @Override
         protected void process(List<Integer> chunks) {
         // Processing data
         maincontrol.setText("Starting temperature simulation, please wait \n");
         System.out.println("chunk:"+chunks);
         }

         // finished process
         @Override
         protected void done() {
         // formating tableview
         createproject[23]="temp_sim.awg";
         table_finalfile[2][1]=createproject[23];
         settable_result_object();
         settable_result_write();
         // Finish sequence
         System.out.println("Finished"); 
         maincontrol.append("Temperature simulation finished \n");
         }
  
        // terminate worker
        };
    }    
    }
    
    // run worker
    Loader test1=new Loader();
    SwingWorker work = test1.createWorker();
    work.execute();
    
    /* old function 
       
       // begin processing
        checkproject();
        maincontrol.setText("Starting temperature simulation, please wait \n");
        String tryoctaverun=("simulate_temp('"+ 
        projectdir+noextension(projectname)+"',"+ seasonal+")");
        maincontrol.append(tryoctaverun+"\n");
        octaverun(tryoctaverun);
        
        // formating tableview
        createproject[23]="temp_sim.awg";
        table_finalfile[2][1]=createproject[23];
        settable_result_object();
        settable_result_write();
        
    */
    }//GEN-LAST:event_run_tempActionPerformed

    private void gettemp_meanensActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gettemp_meanensActionPerformed
        
    checkproject();
    
    // dispatching data
    class Loader {    
    SwingWorker createWorker() {
        return new SwingWorker<Boolean, Integer>() { 
            
        // backgound process     
        @Override
        protected Boolean doInBackground() throws Exception {
        // Background work
        publish(1);
        // define variable
        String input1="temp_regress.awg";
        String input2="predict_future.awg";
        // run function
        awg.simulate_temp_meanens(input1,input2,projectdir,projectid,seasonal);
        // Value transmitted to done()
        return true;
        }

        // main process
         @Override
         protected void process(List<Integer> chunks) {
         // Processing data
         maincontrol.setText("Starting temperature ensemble mean simulation, please wait \n");
         System.out.println("chunk:"+chunks);
         }

         // finished process
         @Override
         protected void done() {
         // formating tableview
        createproject[25]="temp_sim_meanens.awg";
        table_finalfile[4][1]=createproject[25];
        settable_result_object();
        settable_result_write();
         // Finish sequence
         System.out.println("Finished"); 
         maincontrol.append("Temperature ensemble mean simulation finished \n");
         }
  
        // terminate worker
        };
    }    
    }
    
    // run worker
    Loader test1=new Loader();
    SwingWorker work = test1.createWorker();
    work.execute();
    
     /* old function     
        // begin processing
        checkproject();
        maincontrol.setText("Simulating temperature ensemble mean, please wait \n");
        String tryoctaverun=("simulate_temp_meanens('"+ 
        projectdir+noextension(projectname)+"',"+ seasonal+")");
        maincontrol.append(tryoctaverun+"\n");
        octaverun(tryoctaverun);
        
        // formating tableview
        createproject[25]="temp_sim_meanens.awg";
        table_finalfile[4][1]=createproject[25];
        settable_result_object();
        settable_result_write();
    */
    }//GEN-LAST:event_gettemp_meanensActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int returnVal = chooser_aphro.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
        File file = chooser_aphro.getSelectedFile();
        // What to do with the file, e.g. display it in a TextArea
        aphrodir.setText(file.getAbsolutePath());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void time_noaa1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_time_noaa1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_time_noaa1ActionPerformed

    private void time_noaa4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_time_noaa4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_time_noaa4ActionPerformed

    private void time_noaa2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_time_noaa2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_time_noaa2ActionPerformed

    private void time_noaa3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_time_noaa3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_time_noaa3ActionPerformed

    private void noaa_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noaa_cancelActionPerformed
        dialog_noaa.dispose();
    }//GEN-LAST:event_noaa_cancelActionPerformed

    private void noaa_downloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noaa_downloadActionPerformed
    // close dialog
        dialog_noaa.dispose();
        
    // dispatching data
    class Loader {    
    SwingWorker createWorker() {
        return new SwingWorker<Boolean, Integer>() { 
            
        // backgound process     
        @Override
        protected Boolean doInBackground() throws Exception {
        // Background work
        publish(1);
        // define variable
        String noaadir="https://www.esrl.noaa.gov/psd/gcos_wgsp/Timeseries/Data/";
        String noaasource=new String();
        String ninozone = (String)combo_sstobs.getSelectedItem();
        int time1=Integer.parseInt(time_noaa1.getText());
        int time2=Integer.parseInt(time_noaa2.getText());
        int time3=Integer.parseInt(time_noaa3.getText());
        int time4=Integer.parseInt(time_noaa4.getText());
        //selecting data to download
        if (ninozone.equals("Nino 1+2")) {
            noaasource=noaadir+"nino12.long.data";
        } else if (ninozone.equals("Nino 3")) {
            noaasource=noaadir+"nino3.long.data";
        } else if (ninozone.equals("Nino 3.4")) {
            noaasource=noaadir+"nino34.long.data";
        } else if (ninozone.equals("Nino 4")) {
            noaasource=noaadir+"nino4.long.data";
        }
        // download data
        String noaasave = projectdir+"get_noaasst.txt";
        maincontrol.append("running NOAA SST extractor, now download file: \n");
        maincontrol.append(noaasource+"\n to "+noaasave+"\n \n");
        donwloadWeb(noaasource,noaasave);
        // structuring data
        noaa.readnoaa(projectdir,time1,time2,time3,time4);
        // Value transmitted to done()
        return true;
        }

        // main process
         @Override
         protected void process(List<Integer> chunks) {
         // Processing data
         maincontrol.setText("running NOAA SST extractor, now download and formatting, please wait... \n");
         }

         // finished process
         @Override
         protected void done() {
         // Finish sequence
         System.out.println("Finished"); 
         maincontrol.append("\n NOAA SST extractor job completed \n");
         }
  
        // terminate worker
        };
    }    
    }
    
    // run worker
    Loader test1=new Loader();
    SwingWorker work = test1.createWorker();
    work.execute();

        /* old function
        // define noaa directory
        String noaadir="https://www.esrl.noaa.gov/psd/gcos_wgsp/Timeseries/Data/";
        String noaasource=new String();

        // close dialog
        dialog_noaa.dispose();

        //obtain requested zone
        String ninozone = (String)combo_sstobs.getSelectedItem();
        maincontrol.setText("selecting zone: "+ninozone+"... \n \n");

        //selecting data to download
        if (ninozone.equals("Nino 1+2")) {
            noaasource=noaadir+"nino12.long.data";
        } else if (ninozone.equals("Nino 3")) {
            noaasource=noaadir+"nino3.long.data";
        } else if (ninozone.equals("Nino 3.4")) {
            noaasource=noaadir+"nino34.long.data";
        } else if (ninozone.equals("Nino 4")) {
            noaasource=noaadir+"nino4.long.data";
        }

        // download data
        String noaasave = projectdir+"get_noaasst.txt";
        maincontrol.append("running NOAA SST extractor, now download file: \n");
        maincontrol.append(noaasource+"\n to "+noaasave+"\n \n");
        donwloadWeb(noaasource,noaasave);
        
        // initiate variable to structuring data
        int time1=Integer.parseInt(time_noaa1.getText());
        int time2=Integer.parseInt(time_noaa2.getText());
        int time3=Integer.parseInt(time_noaa3.getText());
        int time4=Integer.parseInt(time_noaa4.getText());

        // structuring data
        noaa.readnoaa(projectdir,time1,time2,time3,time4);
        
        // notify main window
        maincontrol.append("\n NOAA SST extractor job completed \n");
        
        */
    }//GEN-LAST:event_noaa_downloadActionPerformed

    private void button_overwrite1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_overwrite1ActionPerformed
        // define dialog interaction
        dialog_projectnotset.dispose();
        //createproject();
    }//GEN-LAST:event_button_overwrite1ActionPerformed

    private void chooser_newActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooser_newActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chooser_newActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel about_desc1;
    private javax.swing.JLabel about_desc2;
    private javax.swing.JLabel about_desc3;
    private javax.swing.JLabel about_support;
    private javax.swing.JLabel about_title;
    private javax.swing.JMenu aboutoption;
    private javax.swing.JButton adjusttemp_cancel;
    private javax.swing.JButton adjusttemp_continue;
    private javax.swing.JTextField adjusttemp_finallev;
    private javax.swing.JTextField adjusttemp_initlev;
    private javax.swing.JButton adjusttemp_outbrowse;
    private javax.swing.JTextField adjusttemp_outfile;
    private javax.swing.JButton adjusttemp_sourcebrowse;
    private javax.swing.JTextField adjusttemp_sourcefile;
    private javax.swing.JButton aphro_cancel;
    private javax.swing.JButton aphro_extract;
    private javax.swing.JTextField aphrodir;
    private javax.swing.JMenuItem aphrosetup;
    private javax.swing.JMenu buildoption;
    private javax.swing.JButton button_nowrite;
    private javax.swing.JButton button_overwrite;
    private javax.swing.JButton button_overwrite1;
    private javax.swing.ButtonGroup buttongroup_class;
    private javax.swing.JButton cfsv2_cancel;
    private javax.swing.JButton cfsv2_download;
    private javax.swing.JLabel cfsv2_label1;
    private javax.swing.JLabel cfsv2_label2;
    private javax.swing.JLabel cfsv2_label3;
    private javax.swing.JLabel cfsv2_label4;
    private javax.swing.JMenuItem cfsv2setup;
    private javax.swing.JFileChooser chooser_adjusttemp_infile;
    private javax.swing.JFileChooser chooser_adjusttemp_outfile;
    private javax.swing.JFileChooser chooser_aphro;
    private javax.swing.JFileChooser chooser_export;
    private javax.swing.JFileChooser chooser_load;
    private javax.swing.JFileChooser chooser_new;
    private javax.swing.JFileChooser chooser_setfuture;
    private javax.swing.JFileChooser chooser_setpredict;
    private javax.swing.JFileChooser chooser_setrain;
    private javax.swing.JFileChooser chooser_settemp;
    private javax.swing.JButton close_about;
    private javax.swing.JMenuItem closeproject;
    private javax.swing.JComboBox<String> combo_cfsens;
    private javax.swing.JComboBox<String> combo_sstobs;
    private javax.swing.JComboBox<String> combo_sstzone;
    private javax.swing.JTextField coord_aphro1;
    private javax.swing.JTextField coord_aphro2;
    private javax.swing.JDialog dialog_adjusttemp;
    private javax.swing.JDialog dialog_aphro;
    private javax.swing.JDialog dialog_cfsv2;
    private javax.swing.JDialog dialog_help;
    private javax.swing.JDialog dialog_modelbuild;
    private javax.swing.JDialog dialog_noaa;
    private javax.swing.JDialog dialog_overwrite;
    private javax.swing.JDialog dialog_projectnotset;
    private javax.swing.JDialog dialog_setfuture;
    private javax.swing.JDialog dialog_setpredict;
    private javax.swing.JDialog dialog_setrain;
    private javax.swing.JDialog dialog_settemp;
    private javax.swing.JMenuItem exitproject;
    private javax.swing.JMenuItem export;
    private javax.swing.JMenu extrasoption;
    private javax.swing.JMenu fileoption;
    private javax.swing.JMenuItem getrain_meanens;
    private javax.swing.JMenuItem getrain_monthens;
    private javax.swing.JMenuItem getrain_monthensmean;
    private javax.swing.JMenuItem gettemp_meanens;
    private javax.swing.JMenuItem gettemp_monthens;
    private javax.swing.JMenuItem gettemp_monthensmean;
    private javax.swing.JMenuItem help;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JMenuItem loadproject;
    private javax.swing.JLabel logo1;
    private javax.swing.JLabel logo2;
    private javax.swing.JLabel logo3;
    private javax.swing.JTable main_table;
    private javax.swing.JTextArea maincontrol;
    private javax.swing.JMenuBar mainmenu;
    private javax.swing.JMenuItem modelbuild;
    private javax.swing.JMenuItem newproject;
    private javax.swing.JButton noaa_cancel;
    private javax.swing.JButton noaa_download;
    private javax.swing.JLabel noaa_jLabel1;
    private javax.swing.JLabel noaa_jLabel12;
    private javax.swing.JLabel noaa_jLabel13;
    private javax.swing.JLabel noaa_jLabel15;
    private javax.swing.JLabel noaa_jLabel16;
    private javax.swing.JLabel noaa_jLabel17;
    private javax.swing.JLabel noaa_jLabel2;
    private javax.swing.JLabel noaa_jLabel20;
    private javax.swing.JLabel noaa_jLabel24;
    private javax.swing.JLabel noaa_jLabel25;
    private javax.swing.JLabel noaa_jLabel3;
    private javax.swing.JLabel noaa_jLabel4;
    private javax.swing.JLabel noaa_jLabel5;
    private javax.swing.JLabel noaa_jLabel6;
    private javax.swing.JLabel noaa_jLabel9;
    private javax.swing.JLabel noaa_label5;
    private javax.swing.JLabel noaa_label6;
    private javax.swing.JLabel noaa_label7;
    private javax.swing.JMenu postprocess;
    private javax.swing.JMenuItem predictor_format;
    private javax.swing.JMenuItem rainregress;
    private javax.swing.JMenuItem rainsetup;
    private javax.swing.JMenuItem run_rain;
    private javax.swing.JMenuItem run_temp;
    private javax.swing.JMenu runoption;
    private javax.swing.JMenuItem saveas;
    private javax.swing.JMenuItem saveproject;
    private javax.swing.JButton setfuture_cancel;
    private javax.swing.JButton setfuture_continue;
    private javax.swing.JTextField setfuture_file;
    private javax.swing.JTextField setfuture_time1;
    private javax.swing.JTextField setfuture_time2;
    private javax.swing.JButton setpredict_browsefile;
    private javax.swing.JButton setpredict_browsefile1;
    private javax.swing.JButton setpredict_cancel;
    private javax.swing.JButton setpredict_continue;
    private javax.swing.JTextField setpredict_file;
    private javax.swing.JTextField setpredict_time1;
    private javax.swing.JTextField setpredict_time2;
    private javax.swing.JButton setrain_browsefile;
    private javax.swing.JButton setrain_cancel;
    private javax.swing.JButton setrain_continue;
    private javax.swing.JTextField setrain_file;
    private javax.swing.JTextField setrain_time1;
    private javax.swing.JTextField setrain_time2;
    private javax.swing.JTextField setrain_time3;
    private javax.swing.JButton settemp_cancel;
    private javax.swing.JButton settemp_continue;
    private javax.swing.JTextField settemp_file;
    private javax.swing.JButton settemp_filebrowse;
    private javax.swing.JTextField settemp_time1;
    private javax.swing.JTextField settemp_time2;
    private javax.swing.JTextField settemp_time3;
    private javax.swing.JMenu setupoption;
    private javax.swing.JMenuItem setuppredictor;
    private javax.swing.JMenuItem setuprain;
    private javax.swing.JMenuItem setupsimulation;
    private javax.swing.JMenuItem setuptemp;
    private javax.swing.JTextField simtime1;
    private javax.swing.JTextField simtime2;
    private javax.swing.JTextField simtime3;
    private javax.swing.JTextField simtime4;
    private javax.swing.JButton simtime_cancel;
    private javax.swing.JButton simtime_continue;
    private javax.swing.JMenuItem sstsetup;
    private javax.swing.JTable table_projectview;
    private javax.swing.JTable table_resultview;
    private javax.swing.JTable table_simview;
    private javax.swing.JMenuItem tempregress;
    private javax.swing.JMenuItem tempsetup;
    private javax.swing.JTextField time_aphro1;
    private javax.swing.JTextField time_aphro2;
    private javax.swing.JTextField time_noaa1;
    private javax.swing.JTextField time_noaa2;
    private javax.swing.JTextField time_noaa3;
    private javax.swing.JTextField time_noaa4;
    private javax.swing.JMenuItem tutorial;
    // End of variables declaration//GEN-END:variables
}
